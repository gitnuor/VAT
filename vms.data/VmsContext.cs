// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace vms.entity.models;

public partial class VmsContext : DbContext
{
    public VmsContext(DbContextOptions<VmsContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Adjustment> Adjustments { get; set; }

    public virtual DbSet<AdjustmentType> AdjustmentTypes { get; set; }

    public virtual DbSet<ApiTransaction> ApiTransactions { get; set; }

    public virtual DbSet<ApiTransactionType> ApiTransactionTypes { get; set; }

    public virtual DbSet<ApprovalStatus> ApprovalStatuses { get; set; }

    public virtual DbSet<AuditLog> AuditLogs { get; set; }

    public virtual DbSet<AuditOperation> AuditOperations { get; set; }

    public virtual DbSet<Bank> Banks { get; set; }

    public virtual DbSet<BillOfMaterial> BillOfMaterials { get; set; }

    public virtual DbSet<BranchTransferReceive> BranchTransferReceives { get; set; }

    public virtual DbSet<BranchTransferReceiveDetail> BranchTransferReceiveDetails { get; set; }

    public virtual DbSet<BranchTransferSend> BranchTransferSends { get; set; }

    public virtual DbSet<BranchTransferSendDetail> BranchTransferSendDetails { get; set; }

    public virtual DbSet<Brand> Brands { get; set; }

    public virtual DbSet<BusinessCategory> BusinessCategories { get; set; }

    public virtual DbSet<BusinessNature> BusinessNatures { get; set; }

    public virtual DbSet<ByProductReceive> ByProductReceives { get; set; }

    public virtual DbSet<Coagroup> Coagroups { get; set; }

    public virtual DbSet<Content> Contents { get; set; }

    public virtual DbSet<ContractType> ContractTypes { get; set; }

    public virtual DbSet<ContractualProduction> ContractualProductions { get; set; }

    public virtual DbSet<ContractualProductionProductDetail> ContractualProductionProductDetails { get; set; }

    public virtual DbSet<ContractualProductionTransferRawMaterial> ContractualProductionTransferRawMaterials { get; set; }

    public virtual DbSet<ContractualProductionTransferRawMaterialDetail> ContractualProductionTransferRawMaterialDetails { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<CreditNote> CreditNotes { get; set; }

    public virtual DbSet<CreditNoteDetail> CreditNoteDetails { get; set; }

    public virtual DbSet<Currency> Currencies { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<CustomerBranch> CustomerBranches { get; set; }

    public virtual DbSet<CustomerCategory> CustomerCategories { get; set; }

    public virtual DbSet<CustomerDeliveryAddress> CustomerDeliveryAddresses { get; set; }

    public virtual DbSet<CustomerSubscription> CustomerSubscriptions { get; set; }

    public virtual DbSet<CustomerSubscriptionCategory> CustomerSubscriptionCategories { get; set; }

    public virtual DbSet<CustomerSubscriptionDetail> CustomerSubscriptionDetails { get; set; }

    public virtual DbSet<CustomsAndVatcommissionarate> CustomsAndVatcommissionarates { get; set; }

    public virtual DbSet<Damage> Damages { get; set; }

    public virtual DbSet<DamageDetail> DamageDetails { get; set; }

    public virtual DbSet<DamageType> DamageTypes { get; set; }

    public virtual DbSet<DebitNote> DebitNotes { get; set; }

    public virtual DbSet<DebitNoteDetail> DebitNoteDetails { get; set; }

    public virtual DbSet<DefaultPercent> DefaultPercents { get; set; }

    public virtual DbSet<DeliveryMethod> DeliveryMethods { get; set; }

    public virtual DbSet<District> Districts { get; set; }

    public virtual DbSet<DistrictOrCity> DistrictOrCities { get; set; }

    public virtual DbSet<DivisionOrState> DivisionOrStates { get; set; }

    public virtual DbSet<DocumentType> DocumentTypes { get; set; }

    public virtual DbSet<ExcelDataUpload> ExcelDataUploads { get; set; }

    public virtual DbSet<ExcelSimplifiedLocalPurchase> ExcelSimplifiedLocalPurchases { get; set; }

    public virtual DbSet<ExcelSimplifiedLocalSaleCalculateByVat> ExcelSimplifiedLocalSaleCalculateByVats { get; set; }

    public virtual DbSet<ExcelSimplifiedPurchase> ExcelSimplifiedPurchases { get; set; }

    public virtual DbSet<ExcelSimplifiedSalse> ExcelSimplifiedSalses { get; set; }

    public virtual DbSet<ExcelUploadedDataType> ExcelUploadedDataTypes { get; set; }

    public virtual DbSet<ExportType> ExportTypes { get; set; }

    public virtual DbSet<FinancialActivityNature> FinancialActivityNatures { get; set; }

    public virtual DbSet<InputOutputCoEfficient> InputOutputCoEfficients { get; set; }

    public virtual DbSet<IntegratedApplication> IntegratedApplications { get; set; }

    public virtual DbSet<IntegratedApplicationRefDataType> IntegratedApplicationRefDataTypes { get; set; }

    public virtual DbSet<IntegratedApplicationRefDatum> IntegratedApplicationRefData { get; set; }

    public virtual DbSet<MeasurementUnit> MeasurementUnits { get; set; }

    public virtual DbSet<MushakGeneration> MushakGenerations { get; set; }

    public virtual DbSet<MushakGenerationStage> MushakGenerationStages { get; set; }

    public virtual DbSet<MushakReturnPayment> MushakReturnPayments { get; set; }

    public virtual DbSet<MushakReturnPaymentForVd> MushakReturnPaymentForVds { get; set; }

    public virtual DbSet<MushakReturnPaymentType> MushakReturnPaymentTypes { get; set; }

    public virtual DbSet<MushakReturnRefund> MushakReturnRefunds { get; set; }

    public virtual DbSet<MushakSubmission> MushakSubmissions { get; set; }

    public virtual DbSet<MushakSubmissionType> MushakSubmissionTypes { get; set; }

    public virtual DbSet<NbrEconomicCode> NbrEconomicCodes { get; set; }

    public virtual DbSet<NbrEconomicCodeType> NbrEconomicCodeTypes { get; set; }

    public virtual DbSet<ObjectType> ObjectTypes { get; set; }

    public virtual DbSet<OldAccountCurrentBalance> OldAccountCurrentBalances { get; set; }

    public virtual DbSet<OrgBranch> OrgBranches { get; set; }

    public virtual DbSet<OrgBranchType> OrgBranchTypes { get; set; }

    public virtual DbSet<OrgStaticDataType> OrgStaticDataTypes { get; set; }

    public virtual DbSet<OrgStaticDatum> OrgStaticData { get; set; }

    public virtual DbSet<Organization> Organizations { get; set; }

    public virtual DbSet<OrganizationConfig> OrganizationConfigs { get; set; }

    public virtual DbSet<OrganizationConfigType> OrganizationConfigTypes { get; set; }

    public virtual DbSet<OrganizationConfigurationArea> OrganizationConfigurationAreas { get; set; }

    public virtual DbSet<OrganizationConfigurationBoolean> OrganizationConfigurationBooleans { get; set; }

    public virtual DbSet<OrganizationConfigurationBooleanType> OrganizationConfigurationBooleanTypes { get; set; }

    public virtual DbSet<OrganizationConfigurationDecimalType> OrganizationConfigurationDecimalTypes { get; set; }

    public virtual DbSet<OrganizationConfigurationIntType> OrganizationConfigurationIntTypes { get; set; }

    public virtual DbSet<OrganizationConfigurationStringType> OrganizationConfigurationStringTypes { get; set; }

    public virtual DbSet<OverHeadCost> OverHeadCosts { get; set; }

    public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }

    public virtual DbSet<PaymentReason> PaymentReasons { get; set; }

    public virtual DbSet<PriceSetup> PriceSetups { get; set; }

    public virtual DbSet<PriceSetupProductCost> PriceSetupProductCosts { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductCategory> ProductCategories { get; set; }

    public virtual DbSet<ProductGroup> ProductGroups { get; set; }

    public virtual DbSet<ProductMeasurementUnit> ProductMeasurementUnits { get; set; }

    public virtual DbSet<ProductOpeningBalance> ProductOpeningBalances { get; set; }

    public virtual DbSet<ProductTransactionBook> ProductTransactionBooks { get; set; }

    public virtual DbSet<ProductType> ProductTypes { get; set; }

    public virtual DbSet<ProductUsedInService> ProductUsedInServices { get; set; }

    public virtual DbSet<ProductVat> ProductVats { get; set; }

    public virtual DbSet<ProductVattype> ProductVattypes { get; set; }

    public virtual DbSet<ProductionReceive> ProductionReceives { get; set; }

    public virtual DbSet<Purchase> Purchases { get; set; }

    public virtual DbSet<PurchaseDetail> PurchaseDetails { get; set; }

    public virtual DbSet<PurchaseImportTariff> PurchaseImportTariffs { get; set; }

    public virtual DbSet<PurchaseImportTaxPayment> PurchaseImportTaxPayments { get; set; }

    public virtual DbSet<PurchaseImportTaxPaymentType> PurchaseImportTaxPaymentTypes { get; set; }

    public virtual DbSet<PurchasePayment> PurchasePayments { get; set; }

    public virtual DbSet<PurchaseReason> PurchaseReasons { get; set; }

    public virtual DbSet<PurchaseType> PurchaseTypes { get; set; }

    public virtual DbSet<Right> Rights { get; set; }

    public virtual DbSet<RightCategory> RightCategories { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<RoleRight> RoleRights { get; set; }

    public virtual DbSet<Sale> Sales { get; set; }

    public virtual DbSet<SalesDeliveryType> SalesDeliveryTypes { get; set; }

    public virtual DbSet<SalesDetail> SalesDetails { get; set; }

    public virtual DbSet<SalesDetailBreakdown> SalesDetailBreakdowns { get; set; }

    public virtual DbSet<SalesPaymentReceive> SalesPaymentReceives { get; set; }

    public virtual DbSet<SalesPriceAdjustment> SalesPriceAdjustments { get; set; }

    public virtual DbSet<SalesPriceAdjustmentDetail> SalesPriceAdjustmentDetails { get; set; }

    public virtual DbSet<SalesType> SalesTypes { get; set; }

    public virtual DbSet<SubscriptionBill> SubscriptionBills { get; set; }

    public virtual DbSet<SubscriptionBillDetail> SubscriptionBillDetails { get; set; }

    public virtual DbSet<SupplimentaryDuty> SupplimentaryDuties { get; set; }

    public virtual DbSet<TdsPayment> TdsPayments { get; set; }

    public virtual DbSet<TdsPaymentForPurchase> TdsPaymentForPurchases { get; set; }

    public virtual DbSet<TransectionType> TransectionTypes { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserBranch> UserBranches { get; set; }

    public virtual DbSet<UserLoginHistory> UserLoginHistories { get; set; }

    public virtual DbSet<UserType> UserTypes { get; set; }

    public virtual DbSet<VehicleType> VehicleTypes { get; set; }

    public virtual DbSet<Vendor> Vendors { get; set; }

    public virtual DbSet<VendorBranch> VendorBranches { get; set; }

    public virtual DbSet<VendorCategory> VendorCategories { get; set; }

    public virtual DbSet<VendorType> VendorTypes { get; set; }

    public virtual DbSet<ViewContractualProduction> ViewContractualProductions { get; set; }

    public virtual DbSet<ViewCreditNote> ViewCreditNotes { get; set; }

    public virtual DbSet<ViewCreditNoteDetail> ViewCreditNoteDetails { get; set; }

    public virtual DbSet<ViewCustomer> ViewCustomers { get; set; }

    public virtual DbSet<ViewCustomerBranch> ViewCustomerBranches { get; set; }

    public virtual DbSet<ViewCustomerForeign> ViewCustomerForeigns { get; set; }

    public virtual DbSet<ViewCustomerLocal> ViewCustomerLocals { get; set; }

    public virtual DbSet<ViewCustomerSubscription> ViewCustomerSubscriptions { get; set; }

    public virtual DbSet<ViewCustomerWithBranch> ViewCustomerWithBranches { get; set; }

    public virtual DbSet<ViewDebitNote> ViewDebitNotes { get; set; }

    public virtual DbSet<ViewDebitNoteDetail> ViewDebitNoteDetails { get; set; }

    public virtual DbSet<ViewInputOutputCoEfficient> ViewInputOutputCoEfficients { get; set; }

    public virtual DbSet<ViewMushakReturnSelfPayment> ViewMushakReturnSelfPayments { get; set; }

    public virtual DbSet<ViewMushakReturnVdsPayment> ViewMushakReturnVdsPayments { get; set; }

    public virtual DbSet<ViewOrganizationConfigurationBoolean> ViewOrganizationConfigurationBooleans { get; set; }

    public virtual DbSet<ViewProduct> ViewProducts { get; set; }

    public virtual DbSet<ViewProductMeasurementUnit> ViewProductMeasurementUnits { get; set; }

    public virtual DbSet<ViewProductVat> ViewProductVats { get; set; }

    public virtual DbSet<ViewProductionReceive> ViewProductionReceives { get; set; }

    public virtual DbSet<ViewPurchase> ViewPurchases { get; set; }

    public virtual DbSet<ViewPurchaseDetail> ViewPurchaseDetails { get; set; }

    public virtual DbSet<ViewPurchaseImport> ViewPurchaseImports { get; set; }

    public virtual DbSet<ViewPurchaseLocal> ViewPurchaseLocals { get; set; }

    public virtual DbSet<ViewPurchaseVd> ViewPurchaseVds { get; set; }

    public virtual DbSet<ViewReferenceCustomer> ViewReferenceCustomers { get; set; }

    public virtual DbSet<ViewReferenceProduct> ViewReferenceProducts { get; set; }

    public virtual DbSet<ViewReferenceUser> ViewReferenceUsers { get; set; }

    public virtual DbSet<ViewReferenceVendor> ViewReferenceVendors { get; set; }

    public virtual DbSet<ViewSale> ViewSales { get; set; }

    public virtual DbSet<ViewSalesDetail> ViewSalesDetails { get; set; }

    public virtual DbSet<ViewSalesExport> ViewSalesExports { get; set; }

    public virtual DbSet<ViewSalesLocal> ViewSalesLocals { get; set; }

    public virtual DbSet<ViewSalesPaymentAgingReport> ViewSalesPaymentAgingReports { get; set; }

    public virtual DbSet<ViewSubscriptionBill> ViewSubscriptionBills { get; set; }

    public virtual DbSet<ViewTdsPayment> ViewTdsPayments { get; set; }

    public virtual DbSet<ViewUploadedContent> ViewUploadedContents { get; set; }

    public virtual DbSet<ViewUser> ViewUsers { get; set; }

    public virtual DbSet<ViewVdsPurchase> ViewVdsPurchases { get; set; }

    public virtual DbSet<ViewVdsSale> ViewVdsSales { get; set; }

    public virtual DbSet<ViewVdsSale1> ViewVdsSales1 { get; set; }

    public virtual DbSet<ViewVendor> ViewVendors { get; set; }

    public virtual DbSet<ViewVendorBranch> ViewVendorBranches { get; set; }

    public virtual DbSet<ViewVendorForeign> ViewVendorForeigns { get; set; }

    public virtual DbSet<ViewVendorLocal> ViewVendorLocals { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Adjustment>(entity =>
        {
            entity.ToTable("Adjustment");

            entity.Property(e => e.Amount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);

            entity.HasOne(d => d.AdjustmentType).WithMany(p => p.Adjustments)
                .HasForeignKey(d => d.AdjustmentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Adjustment_AdjustmentType");

            entity.HasOne(d => d.Organization).WithMany(p => p.Adjustments)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Adjustment_Organizations");
        });

        modelBuilder.Entity<AdjustmentType>(entity =>
        {
            entity.ToTable("AdjustmentType");

            entity.Property(e => e.AdjustmentTypeId).ValueGeneratedNever();
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.NameInBangla).HasMaxLength(50);
        });

        modelBuilder.Entity<ApiTransaction>(entity =>
        {
            entity.ToTable("ApiTransaction");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.SecurityToken).HasMaxLength(100);

            entity.HasOne(d => d.ApiTransactionType).WithMany(p => p.ApiTransactions)
                .HasForeignKey(d => d.ApiTransactionTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ApiTransaction_ApiTransactionType");
        });

        modelBuilder.Entity<ApiTransactionType>(entity =>
        {
            entity.ToTable("ApiTransactionType");

            entity.Property(e => e.ApiTransactionTypeId).ValueGeneratedNever();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<ApprovalStatus>(entity =>
        {
            entity.ToTable("ApprovalStatus");

            entity.Property(e => e.ApprovalStatusId).ValueGeneratedNever();
            entity.Property(e => e.StatusName)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<AuditLog>(entity =>
        {
            entity.ToTable("AuditLog");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.Descriptions)
                .IsRequired()
                .HasMaxLength(4000);

            entity.HasOne(d => d.AuditOperation).WithMany(p => p.AuditLogs)
                .HasForeignKey(d => d.AuditOperationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AuditLog_AuditOperation");

            entity.HasOne(d => d.ObjectType).WithMany(p => p.AuditLogs)
                .HasForeignKey(d => d.ObjectTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AuditLog_ObjectType");

            entity.HasOne(d => d.Organization).WithMany(p => p.AuditLogs)
                .HasForeignKey(d => d.OrganizationId)
                .HasConstraintName("FK_AuditLog_Organizations");

            entity.HasOne(d => d.User).WithMany(p => p.AuditLogs)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AuditLog_Users");
        });

        modelBuilder.Entity<AuditOperation>(entity =>
        {
            entity.ToTable("AuditOperation");

            entity.Property(e => e.AuditOperationId)
                .ValueGeneratedNever()
                .HasColumnName("AuditOperationID");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Remarks).HasMaxLength(500);
        });

        modelBuilder.Entity<Bank>(entity =>
        {
            entity.ToTable("Bank");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.NameInBangla)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);

            entity.HasOne(d => d.Organization).WithMany(p => p.Banks)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Bank_Organizations");
        });

        modelBuilder.Entity<BillOfMaterial>(entity =>
        {
            entity.ToTable("BillOfMaterial");

            entity.Property(e => e.ConversionRatio).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.UsedQuantity).HasColumnType("decimal(26, 8)");

            entity.HasOne(d => d.MeasurementUnit).WithMany(p => p.BillOfMaterials)
                .HasForeignKey(d => d.MeasurementUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillOfMaterial_MeasurementUnits");

            entity.HasOne(d => d.ProductTransactionBook).WithMany(p => p.BillOfMaterials)
                .HasForeignKey(d => d.ProductTransactionBookId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillOfMaterial_ProductTransactionBook");

            entity.HasOne(d => d.ProductionReceive).WithMany(p => p.BillOfMaterials)
                .HasForeignKey(d => d.ProductionReceiveId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillOfMaterial_ProductionReceive");

            entity.HasOne(d => d.RawMaterial).WithMany(p => p.BillOfMaterials)
                .HasForeignKey(d => d.RawMaterialId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillOfMaterial_Products");
        });

        modelBuilder.Entity<BranchTransferReceive>(entity =>
        {
            entity.ToTable("BranchTransferReceive");

            entity.Property(e => e.BranchTransferReceiveDate).HasColumnType("datetime");
            entity.Property(e => e.BranchTransferReceiveRemarks).HasMaxLength(500);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.LastModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.PostedTime).HasColumnType("datetime");
            entity.Property(e => e.ReceiverContactNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReceiverName).HasMaxLength(200);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.TransferChallanNo).HasMaxLength(50);
            entity.Property(e => e.VehicleDriverContactNo).HasMaxLength(50);
            entity.Property(e => e.VehicleDriverName).HasMaxLength(100);
            entity.Property(e => e.VehicleName).HasMaxLength(100);
            entity.Property(e => e.VehicleRegNo).HasMaxLength(50);

            entity.HasOne(d => d.BranchTransferSend).WithMany(p => p.BranchTransferReceives)
                .HasForeignKey(d => d.BranchTransferSendId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BranchTransferReceive_BranchTransferSend");

            entity.HasOne(d => d.OrgBranchReceiver).WithMany(p => p.BranchTransferReceiveOrgBranchReceivers)
                .HasForeignKey(d => d.OrgBranchReceiverId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BranchTransferReceive_OrgBranch_Receiver_Receive");

            entity.HasOne(d => d.OrgBranchSender).WithMany(p => p.BranchTransferReceiveOrgBranchSenders)
                .HasForeignKey(d => d.OrgBranchSenderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BranchTransferReceive_OrgBranch_Sender_Receive");

            entity.HasOne(d => d.Organization).WithMany(p => p.BranchTransferReceives)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BranchTransferReceive_Organizations");

            entity.HasOne(d => d.VehicleType).WithMany(p => p.BranchTransferReceives)
                .HasForeignKey(d => d.VehicleTypeId)
                .HasConstraintName("FK_BranchTransferReceive_VehicleType");
        });

        modelBuilder.Entity<BranchTransferReceiveDetail>(entity =>
        {
            entity.Property(e => e.ConversionRatio).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.GoodsId).HasMaxLength(50);
            entity.Property(e => e.Hscode)
                .HasMaxLength(50)
                .HasColumnName("HSCode");
            entity.Property(e => e.PartNo).HasMaxLength(100);
            entity.Property(e => e.ProductCode).HasMaxLength(50);
            entity.Property(e => e.ProductDescription).HasMaxLength(500);
            entity.Property(e => e.Quantity).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.Skuid)
                .HasMaxLength(50)
                .HasColumnName("SKUId");
            entity.Property(e => e.Skuno)
                .HasMaxLength(50)
                .HasColumnName("SKUNo");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(26, 8)");

            entity.HasOne(d => d.BranchTransferReceive).WithMany(p => p.BranchTransferReceiveDetails)
                .HasForeignKey(d => d.BranchTransferReceiveId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BranchTransferReceiveDetails_BranchTransferReceive");

            entity.HasOne(d => d.BranchTransferSendDetail).WithMany(p => p.BranchTransferReceiveDetails)
                .HasForeignKey(d => d.BranchTransferSendDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BranchTransferReceiveDetails_BranchTransferSendDetails");

            entity.HasOne(d => d.MeasurementUnit).WithMany(p => p.BranchTransferReceiveDetails)
                .HasForeignKey(d => d.MeasurementUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BranchTransferReceiveDetails_MeasurementUnits");

            entity.HasOne(d => d.Product).WithMany(p => p.BranchTransferReceiveDetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BranchTransferReceiveDetails_Products");
        });

        modelBuilder.Entity<BranchTransferSend>(entity =>
        {
            entity.ToTable("BranchTransferSend");

            entity.Property(e => e.BranchTransferSendDate).HasColumnType("datetime");
            entity.Property(e => e.BranchTransferSendRemarks).HasMaxLength(500);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.LastModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.PostedTime).HasColumnType("datetime");
            entity.Property(e => e.ReceiverContactNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReceiverName).HasMaxLength(200);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.ShippingAddress).HasMaxLength(200);
            entity.Property(e => e.TransferChallanNo).HasMaxLength(50);
            entity.Property(e => e.TransferChallanPrintedTime).HasColumnType("datetime");
            entity.Property(e => e.VehicleDriverContactNo).HasMaxLength(50);
            entity.Property(e => e.VehicleDriverName).HasMaxLength(100);
            entity.Property(e => e.VehicleName).HasMaxLength(100);
            entity.Property(e => e.VehicleRegNo).HasMaxLength(50);

            entity.HasOne(d => d.OrgBranchReceiver).WithMany(p => p.BranchTransferSendOrgBranchReceivers)
                .HasForeignKey(d => d.OrgBranchReceiverId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BranchTransferSend_OrgBranch_Receiver_Send");

            entity.HasOne(d => d.OrgBranchSender).WithMany(p => p.BranchTransferSendOrgBranchSenders)
                .HasForeignKey(d => d.OrgBranchSenderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BranchTransferSend_OrgBranch_Sender_Send");

            entity.HasOne(d => d.Organization).WithMany(p => p.BranchTransferSends)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BranchTransferSend_Organizations");

            entity.HasOne(d => d.VehicleType).WithMany(p => p.BranchTransferSends)
                .HasForeignKey(d => d.VehicleTypeId)
                .HasConstraintName("FK_BranchTransferSend_VehicleType");
        });

        modelBuilder.Entity<BranchTransferSendDetail>(entity =>
        {
            entity.Property(e => e.ConversionRatio).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.GoodsId).HasMaxLength(50);
            entity.Property(e => e.Hscode)
                .HasMaxLength(50)
                .HasColumnName("HSCode");
            entity.Property(e => e.PartNo).HasMaxLength(100);
            entity.Property(e => e.ProductCode).HasMaxLength(50);
            entity.Property(e => e.ProductDescription).HasMaxLength(500);
            entity.Property(e => e.ProductRemarks).HasMaxLength(500);
            entity.Property(e => e.Quantity).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.Skuid)
                .HasMaxLength(50)
                .HasColumnName("SKUId");
            entity.Property(e => e.Skuno)
                .HasMaxLength(50)
                .HasColumnName("SKUNo");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(26, 8)");

            entity.HasOne(d => d.BranchTransferSend).WithMany(p => p.BranchTransferSendDetails)
                .HasForeignKey(d => d.BranchTransferSendId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BranchTransferSendDetails_BranchTransferSend");

            entity.HasOne(d => d.MeasurementUnit).WithMany(p => p.BranchTransferSendDetails)
                .HasForeignKey(d => d.MeasurementUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BranchTransferSendDetails_MeasurementUnits");

            entity.HasOne(d => d.Product).WithMany(p => p.BranchTransferSendDetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BranchTransferSendDetails_Products");

            entity.HasOne(d => d.ProductTransactionBook).WithMany(p => p.BranchTransferSendDetails)
                .HasForeignKey(d => d.ProductTransactionBookId)
                .HasConstraintName("FK_BranchTransferSendDetails_ProductTransactionBook");
        });

        modelBuilder.Entity<Brand>(entity =>
        {
            entity.ToTable("Brand");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.NameInBangla).HasMaxLength(250);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);

            entity.HasOne(d => d.Organization).WithMany(p => p.Brands)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Brand_Organizations");
        });

        modelBuilder.Entity<BusinessCategory>(entity =>
        {
            entity.ToTable("BusinessCategory");

            entity.Property(e => e.BusinessCategoryId).ValueGeneratedNever();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.NameInBangla)
                .IsRequired()
                .HasMaxLength(250);
        });

        modelBuilder.Entity<BusinessNature>(entity =>
        {
            entity.ToTable("BusinessNature");

            entity.Property(e => e.BusinessNatureId).ValueGeneratedNever();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NameInBangla)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<ByProductReceive>(entity =>
        {
            entity.ToTable("ByProductReceive");

            entity.Property(e => e.ConversionRatio).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ProductDescription).HasMaxLength(500);
            entity.Property(e => e.Quantity).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ReceiveDate).HasColumnType("datetime");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.Remarks).HasMaxLength(500);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(26, 8)");

            entity.HasOne(d => d.MeasurementUnit).WithMany(p => p.ByProductReceives)
                .HasForeignKey(d => d.MeasurementUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ByProductReceive_MeasurementUnits");

            entity.HasOne(d => d.OrgBranch).WithMany(p => p.ByProductReceives)
                .HasForeignKey(d => d.OrgBranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ByProductReceive_OrgBranch");

            entity.HasOne(d => d.Organization).WithMany(p => p.ByProductReceives)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ByProductReceive_Organizations");

            entity.HasOne(d => d.Product).WithMany(p => p.ByProductReceives)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ByProductReceive_Products");
        });

        modelBuilder.Entity<Coagroup>(entity =>
        {
            entity.ToTable("COAGroups", "acc");

            entity.Property(e => e.CoagroupId).HasColumnName("COAGroupId");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Node).HasMaxLength(50);
        });

        modelBuilder.Entity<Content>(entity =>
        {
            entity.ToTable("Content");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.FileUrl)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.MimeType).HasMaxLength(50);
            entity.Property(e => e.Node).HasMaxLength(500);
            entity.Property(e => e.Remarks).HasMaxLength(500);

            entity.HasOne(d => d.DocumentType).WithMany(p => p.Contents)
                .HasForeignKey(d => d.DocumentTypeId)
                .HasConstraintName("FK_Content_DocumentType");
        });

        modelBuilder.Entity<ContractType>(entity =>
        {
            entity.ToTable("ContractType");

            entity.Property(e => e.ContractTypeId).ValueGeneratedNever();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<ContractualProduction>(entity =>
        {
            entity.ToTable("ContractualProduction");

            entity.Property(e => e.ChallanNo).HasMaxLength(50);
            entity.Property(e => e.ClosingDate).HasColumnType("datetime");
            entity.Property(e => e.ContractDate).HasColumnType("datetime");
            entity.Property(e => e.ContractNo)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.IssueDate).HasColumnType("datetime");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);

            entity.HasOne(d => d.ContractType).WithMany(p => p.ContractualProductions)
                .HasForeignKey(d => d.ContractTypeId)
                .HasConstraintName("FK_ContractualProduction_ContractType");

            entity.HasOne(d => d.Customer).WithMany(p => p.ContractualProductions)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_ContractualProduction_Customer");

            entity.HasOne(d => d.Vendor).WithMany(p => p.ContractualProductions)
                .HasForeignKey(d => d.VendorId)
                .HasConstraintName("FK_ContractualProduction_Vendor");
        });

        modelBuilder.Entity<ContractualProductionProductDetail>(entity =>
        {
            entity.HasKey(e => e.ContractualProductionProductDetailsId);

            entity.Property(e => e.ConversionRatio).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.Quantity).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);

            entity.HasOne(d => d.ContractualProduction).WithMany(p => p.ContractualProductionProductDetails)
                .HasForeignKey(d => d.ContractualProductionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ContractualProductionProductDetails_ContractualProduction");

            entity.HasOne(d => d.MeasurementUnit).WithMany(p => p.ContractualProductionProductDetails)
                .HasForeignKey(d => d.MeasurementUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ContractualProductionProductDetails_MeasurementUnits");

            entity.HasOne(d => d.Product).WithMany(p => p.ContractualProductionProductDetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ContractualProductionProductDetails_Products");
        });

        modelBuilder.Entity<ContractualProductionTransferRawMaterial>(entity =>
        {
            entity.ToTable("ContractualProductionTransferRawMaterial");

            entity.Property(e => e.ChallanIssueDate).HasColumnType("datetime");
            entity.Property(e => e.ChallanNo)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Location)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.TransfereDate).HasColumnType("datetime");
            entity.Property(e => e.VehicleDriverContactNo).HasMaxLength(50);
            entity.Property(e => e.VehicleDriverName).HasMaxLength(100);
            entity.Property(e => e.VehicleName).HasMaxLength(100);
            entity.Property(e => e.VehicleRegNo).HasMaxLength(50);

            entity.HasOne(d => d.ContractualProduction).WithMany(p => p.ContractualProductionTransferRawMaterials)
                .HasForeignKey(d => d.ContractualProductionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ContractualProductionTransferRawMaterial_ContractualProduction");

            entity.HasOne(d => d.VehicleType).WithMany(p => p.ContractualProductionTransferRawMaterials)
                .HasForeignKey(d => d.VehicleTypeId)
                .HasConstraintName("FK_ContractualProductionTransferRawMaterial_VehicleType");
        });

        modelBuilder.Entity<ContractualProductionTransferRawMaterialDetail>(entity =>
        {
            entity.HasKey(e => e.ContractualProductionTransferRawMaterialDetailsId);

            entity.Property(e => e.ConversionRatio).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.Quantity).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);

            entity.HasOne(d => d.ContractualProductionTransferRawMaterial).WithMany(p => p.ContractualProductionTransferRawMaterialDetails)
                .HasForeignKey(d => d.ContractualProductionTransferRawMaterialId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ContractualProductionTransferRawMaterialDetails_ContractualProductionTransferRawMaterial");

            entity.HasOne(d => d.MeasurementUnit).WithMany(p => p.ContractualProductionTransferRawMaterialDetails)
                .HasForeignKey(d => d.MeasurementUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ContractualProductionTransferRawMaterialDetails_MeasurementUnits");

            entity.HasOne(d => d.RawMaterial).WithMany(p => p.ContractualProductionTransferRawMaterialDetails)
                .HasForeignKey(d => d.RawMaterialId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ContractualProductionTransferRawMaterialDetails_Products");
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.ToTable("Country");

            entity.Property(e => e.CountryId).ValueGeneratedNever();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<CreditNote>(entity =>
        {
            entity.ToTable("CreditNote");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.CreditNoteChallanNo).HasMaxLength(50);
            entity.Property(e => e.CreditNoteChallanPrintTime).HasColumnType("datetime");
            entity.Property(e => e.ReasonOfReturn).HasMaxLength(500);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.ReturnDate).HasColumnType("datetime");
            entity.Property(e => e.VehicleDriverContactNo).HasMaxLength(50);
            entity.Property(e => e.VehicleDriverName).HasMaxLength(100);
            entity.Property(e => e.VehicleName).HasMaxLength(100);
            entity.Property(e => e.VehicleRegNo).HasMaxLength(50);
            entity.Property(e => e.VoucherNo)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.MushakGeneration).WithMany(p => p.CreditNotes)
                .HasForeignKey(d => d.MushakGenerationId)
                .HasConstraintName("FK_CreditNote_MushakGeneration");

            entity.HasOne(d => d.Sales).WithMany(p => p.CreditNotes)
                .HasForeignKey(d => d.SalesId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CreditNote_Sales");

            entity.HasOne(d => d.VehicleType).WithMany(p => p.CreditNotes)
                .HasForeignKey(d => d.VehicleTypeId)
                .HasConstraintName("FK_CreditNote_VehicleType");
        });

        modelBuilder.Entity<CreditNoteDetail>(entity =>
        {
            entity.ToTable("CreditNoteDetail");

            entity.Property(e => e.ConversionRatio).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ReasonOfReturn).HasMaxLength(500);
            entity.Property(e => e.ReasonOfReturnInDetail).HasMaxLength(500);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.ReturnQuantity).HasColumnType("decimal(26, 8)");

            entity.HasOne(d => d.CreditNote).WithMany(p => p.CreditNoteDetails)
                .HasForeignKey(d => d.CreditNoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CreditNoteDetail_CreditNote");

            entity.HasOne(d => d.MeasurementUnit).WithMany(p => p.CreditNoteDetails)
                .HasForeignKey(d => d.MeasurementUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CreditNoteDetail_MeasurementUnits");

            entity.HasOne(d => d.SalesDetail).WithMany(p => p.CreditNoteDetails)
                .HasForeignKey(d => d.SalesDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CreditNoteDetail_SalesDetails");
        });

        modelBuilder.Entity<Currency>(entity =>
        {
            entity.ToTable("Currency");

            entity.Property(e => e.CurrencyId).ValueGeneratedNever();
            entity.Property(e => e.CurrencyCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CurrencyName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.CurrencySymbol)
                .IsRequired()
                .HasMaxLength(10);
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.ToTable("Customer");

            entity.Property(e => e.AccountCode).HasMaxLength(100);
            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.BankAccountNo).HasMaxLength(50);
            entity.Property(e => e.BankBranchAddress).HasMaxLength(200);
            entity.Property(e => e.BankBranchDistrictOrCityName).HasMaxLength(200);
            entity.Property(e => e.BankBranchName).HasMaxLength(100);
            entity.Property(e => e.BankRoutingCode).HasMaxLength(50);
            entity.Property(e => e.Bin)
                .HasMaxLength(50)
                .HasColumnName("BIN");
            entity.Property(e => e.BusinessCategoryDescription).HasMaxLength(500);
            entity.Property(e => e.ContactPerson).HasMaxLength(100);
            entity.Property(e => e.ContactPersonDesignation).HasMaxLength(100);
            entity.Property(e => e.ContactPersonEmailAddress).HasMaxLength(100);
            entity.Property(e => e.ContactPersonMobile).HasMaxLength(20);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.CreditLimit).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.CustomerCode).HasMaxLength(100);
            entity.Property(e => e.CustomsAndVatcommissionarateId).HasColumnName("CustomsAndVATCommissionarateId");
            entity.Property(e => e.DeliveryAddress).HasMaxLength(500);
            entity.Property(e => e.DeliveryContactPerson).HasMaxLength(100);
            entity.Property(e => e.DeliveryContactPersonDesignation).HasMaxLength(100);
            entity.Property(e => e.DeliveryContactPersonEmailAddress).HasMaxLength(100);
            entity.Property(e => e.DeliveryContactPersonMobile).HasMaxLength(20);
            entity.Property(e => e.DeliveryDistrictOrCityName).HasMaxLength(200);
            entity.Property(e => e.DeliveryDivisionOrStateName).HasMaxLength(200);
            entity.Property(e => e.DistrictOrCityName).HasMaxLength(200);
            entity.Property(e => e.DivisionOrStateName).HasMaxLength(200);
            entity.Property(e => e.EmailAddress).HasMaxLength(100);
            entity.Property(e => e.IsTds).HasColumnName("IsTDS");
            entity.Property(e => e.IsVds).HasColumnName("IsVDS");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Nidno)
                .HasMaxLength(50)
                .HasColumnName("NIDNo");
            entity.Property(e => e.PhoneNo).HasMaxLength(20);
            entity.Property(e => e.PostCode).HasMaxLength(20);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.RegistrationNumberUnderActNinetyFour).HasMaxLength(50);
            entity.Property(e => e.ServiceVatCode).HasMaxLength(50);
            entity.Property(e => e.Tdsrate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TDSRate");
            entity.Property(e => e.Tinno)
                .HasMaxLength(50)
                .HasColumnName("TINNo");
            entity.Property(e => e.Vdsrate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("VDSRate");

            entity.HasOne(d => d.BankBranchCountry).WithMany(p => p.CustomerBankBranchCountries)
                .HasForeignKey(d => d.BankBranchCountryId)
                .HasConstraintName("FK_Customer_Country_BankBranch");

            entity.HasOne(d => d.Bank).WithMany(p => p.Customers)
                .HasForeignKey(d => d.BankId)
                .HasConstraintName("FK_Customer_Bank");

            entity.HasOne(d => d.BusinessCategory).WithMany(p => p.Customers)
                .HasForeignKey(d => d.BusinessCategoryId)
                .HasConstraintName("FK_Customer_BusinessCategory");

            entity.HasOne(d => d.BusinessNature).WithMany(p => p.Customers)
                .HasForeignKey(d => d.BusinessNatureId)
                .HasConstraintName("FK_Customer_BusinessNature");

            entity.HasOne(d => d.Country).WithMany(p => p.CustomerCountries)
                .HasForeignKey(d => d.CountryId)
                .HasConstraintName("FK_Customer_Country");

            entity.HasOne(d => d.CustomerCategory).WithMany(p => p.Customers)
                .HasForeignKey(d => d.CustomerCategoryId)
                .HasConstraintName("FK_Customer_CustomerCategory");

            entity.HasOne(d => d.CustomsAndVatcommissionarate).WithMany(p => p.Customers)
                .HasForeignKey(d => d.CustomsAndVatcommissionarateId)
                .HasConstraintName("FK_Customer_CustomsAndVATCommissionarate");

            entity.HasOne(d => d.Organization).WithMany(p => p.Customers)
                .HasForeignKey(d => d.OrganizationId)
                .HasConstraintName("FK_Customer_Organizations");
        });

        modelBuilder.Entity<CustomerBranch>(entity =>
        {
            entity.ToTable("CustomerBranch");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerBranches)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomerBranch_Customer");

            entity.HasOne(d => d.OrgBranch).WithMany(p => p.CustomerBranches)
                .HasForeignKey(d => d.OrgBranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomerBranch_OrgBranch");

            entity.HasOne(d => d.Organization).WithMany(p => p.CustomerBranches)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomerBranch_Organizations");
        });

        modelBuilder.Entity<CustomerCategory>(entity =>
        {
            entity.ToTable("CustomerCategory");

            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Remarks).HasMaxLength(1000);

            entity.HasOne(d => d.Organization).WithMany(p => p.CustomerCategories)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomerCategory_Organizations");
        });

        modelBuilder.Entity<CustomerDeliveryAddress>(entity =>
        {
            entity.ToTable("CustomerDeliveryAddress");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.DeliveryAddress)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.DeliveryContactPerson).HasMaxLength(100);
            entity.Property(e => e.DeliveryContactPersonDesignation).HasMaxLength(100);
            entity.Property(e => e.DeliveryContactPersonEmailAddress).HasMaxLength(100);
            entity.Property(e => e.DeliveryContactPersonMobile).HasMaxLength(20);
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);

            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerDeliveryAddresses)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomerDeliveryAddress_Customer");

            entity.HasOne(d => d.Organization).WithMany(p => p.CustomerDeliveryAddresses)
                .HasForeignKey(d => d.OrganizationId)
                .HasConstraintName("FK_CustomerDeliveryAddress_Organizations");
        });

        modelBuilder.Entity<CustomerSubscription>(entity =>
        {
            entity.ToTable("CustomerSubscription");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Remarks).HasMaxLength(2000);

            entity.HasOne(d => d.CollectionOffice).WithMany(p => p.CustomerSubscriptionCollectionOffices)
                .HasForeignKey(d => d.CollectionOfficeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomerSubscription_OrgBranch_BillCollection");

            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerSubscriptions)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomerSubscription_Customer");

            entity.HasOne(d => d.OrgBranch).WithMany(p => p.CustomerSubscriptionOrgBranches)
                .HasForeignKey(d => d.OrgBranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomerSubscription_OrgBranch");

            entity.HasOne(d => d.Organization).WithMany(p => p.CustomerSubscriptions)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomerSubscription_Organizations");
        });

        modelBuilder.Entity<CustomerSubscriptionCategory>(entity =>
        {
            entity.ToTable("CustomerSubscriptionCategory");

            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Remarks).HasMaxLength(1000);

            entity.HasOne(d => d.Organization).WithMany(p => p.CustomerSubscriptionCategories)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomerSubscriptionCategory_Organizations");
        });

        modelBuilder.Entity<CustomerSubscriptionDetail>(entity =>
        {
            entity.ToTable("CustomerSubscriptionDetail");

            entity.Property(e => e.ConversionRatio).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(2000);
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.ProductVatPercent).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Quantity).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.SupplementaryDutyPercent).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(26, 8)");

            entity.HasOne(d => d.CustomerSubscription).WithMany(p => p.CustomerSubscriptionDetails)
                .HasForeignKey(d => d.CustomerSubscriptionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomerSubscriptionDetail_CustomerSubscription");

            entity.HasOne(d => d.MeasurementUnit).WithMany(p => p.CustomerSubscriptionDetails)
                .HasForeignKey(d => d.MeasurementUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomerSubscriptionDetail_MeasurementUnits");

            entity.HasOne(d => d.Product).WithMany(p => p.CustomerSubscriptionDetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomerSubscriptionDetail_Products");

            entity.HasOne(d => d.ProductVatType).WithMany(p => p.CustomerSubscriptionDetails)
                .HasForeignKey(d => d.ProductVatTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomerSubscriptionDetail_ProductVATTypes");
        });

        modelBuilder.Entity<CustomsAndVatcommissionarate>(entity =>
        {
            entity.ToTable("CustomsAndVATCommissionarate");

            entity.Property(e => e.CustomsAndVatcommissionarateId)
                .ValueGeneratedNever()
                .HasColumnName("CustomsAndVATCommissionarateId");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.NameInBangla)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.OperationalCode)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.OperationalCode1stDigit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.OperationalCode2ndDigit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.OperationalCode3rdDigit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.OperationalCode4thDigit)
                .IsRequired()
                .HasMaxLength(2);
        });

        modelBuilder.Entity<Damage>(entity =>
        {
            entity.ToTable("Damage");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.IsApprovedByNbr).HasColumnName("IsApprovedByNBR");
            entity.Property(e => e.IsDismissedByNbr).HasColumnName("IsDismissedByNBR");
            entity.Property(e => e.NbrsubmissionDate)
                .HasColumnType("datetime")
                .HasColumnName("NBRSubmissionDate");
            entity.Property(e => e.NbrverificationDate)
                .HasColumnType("datetime")
                .HasColumnName("NBRVerificationDate");
            entity.Property(e => e.NbrverifierDesignation)
                .HasMaxLength(200)
                .HasColumnName("NBRVerifierDesignation");
            entity.Property(e => e.NbrverifierName)
                .HasMaxLength(200)
                .HasColumnName("NBRVerifierName");
            entity.Property(e => e.PreparedOn).HasColumnType("datetime");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.VoucherNo).HasMaxLength(50);

            entity.HasOne(d => d.DamageType).WithMany(p => p.Damages)
                .HasForeignKey(d => d.DamageTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Damage_DamageType");

            entity.HasOne(d => d.Organization).WithMany(p => p.Damages)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Damage_Organizations");

            entity.HasOne(d => d.Purchase).WithMany(p => p.Damages)
                .HasForeignKey(d => d.PurchaseId)
                .HasConstraintName("FK_Damage_Purchase");

            entity.HasOne(d => d.Sales).WithMany(p => p.Damages)
                .HasForeignKey(d => d.SalesId)
                .HasConstraintName("FK_Damage_Sales");
        });

        modelBuilder.Entity<DamageDetail>(entity =>
        {
            entity.ToTable("DamageDetail");

            entity.Property(e => e.ApprovedNewUnitPrice).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ApprovedUsableQty).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ConversionRatio).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.DamageDescription)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.DamageQty).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.SuggestedNewUnitPrice).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.UsablePercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UsableQty).HasColumnType("decimal(26, 8)");

            entity.HasOne(d => d.Damage).WithMany(p => p.DamageDetails)
                .HasForeignKey(d => d.DamageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DamageDetail_Damage");

            entity.HasOne(d => d.MeasurementUnit).WithMany(p => p.DamageDetails)
                .HasForeignKey(d => d.MeasurementUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DamageDetail_MeasurementUnits");

            entity.HasOne(d => d.Product).WithMany(p => p.DamageDetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DamageDetail_Products");

            entity.HasOne(d => d.PurchaseDetail).WithMany(p => p.DamageDetails)
                .HasForeignKey(d => d.PurchaseDetailId)
                .HasConstraintName("FK_DamageDetail_PurchaseDetails");

            entity.HasOne(d => d.SalesDetail).WithMany(p => p.DamageDetails)
                .HasForeignKey(d => d.SalesDetailId)
                .HasConstraintName("FK_DamageDetail_SalesDetails");
        });

        modelBuilder.Entity<DamageType>(entity =>
        {
            entity.ToTable("DamageType");

            entity.Property(e => e.DamageTypeId).ValueGeneratedNever();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.NameInBangla).HasMaxLength(50);
        });

        modelBuilder.Entity<DebitNote>(entity =>
        {
            entity.ToTable("DebitNote");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.DebitNoteChallanNo).HasMaxLength(50);
            entity.Property(e => e.DebitNoteChallanPrintTime).HasColumnType("datetime");
            entity.Property(e => e.ReasonOfReturn).HasMaxLength(500);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.ReturnDate).HasColumnType("datetime");
            entity.Property(e => e.VehicleDriverContactNo).HasMaxLength(50);
            entity.Property(e => e.VehicleDriverName).HasMaxLength(100);
            entity.Property(e => e.VehicleName).HasMaxLength(100);
            entity.Property(e => e.VehicleRegNo).HasMaxLength(50);
            entity.Property(e => e.VoucherNo)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.MushakGeneration).WithMany(p => p.DebitNotes)
                .HasForeignKey(d => d.MushakGenerationId)
                .HasConstraintName("FK_DebitNote_MushakGeneration");

            entity.HasOne(d => d.Purchase).WithMany(p => p.DebitNotes)
                .HasForeignKey(d => d.PurchaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DebitNote_Purchase");
        });

        modelBuilder.Entity<DebitNoteDetail>(entity =>
        {
            entity.ToTable("DebitNoteDetail");

            entity.Property(e => e.ConversionRatio).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ReasonOfReturn).HasMaxLength(500);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.ReturnQuantity).HasColumnType("decimal(26, 8)");

            entity.HasOne(d => d.DebitNote).WithMany(p => p.DebitNoteDetails)
                .HasForeignKey(d => d.DebitNoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DebitNoteDetail_DebitNote");

            entity.HasOne(d => d.MeasurementUnit).WithMany(p => p.DebitNoteDetails)
                .HasForeignKey(d => d.MeasurementUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DebitNoteDetail_MeasurementUnits");

            entity.HasOne(d => d.PurchaseDetail).WithMany(p => p.DebitNoteDetails)
                .HasForeignKey(d => d.PurchaseDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DebitNoteDetail_PurchaseDetails");
        });

        modelBuilder.Entity<DefaultPercent>(entity =>
        {
            entity.ToTable("DefaultPercent");

            entity.Property(e => e.DefaultPercentFor)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.DefaultPercentValue).HasColumnType("decimal(8, 2)");
        });

        modelBuilder.Entity<DeliveryMethod>(entity =>
        {
            entity.ToTable("DeliveryMethod");

            entity.Property(e => e.DeliveryMethodId).ValueGeneratedNever();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<District>(entity =>
        {
            entity.ToTable("District");

            entity.Property(e => e.DistrictId).ValueGeneratedNever();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.NameInBangla)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<DistrictOrCity>(entity =>
        {
            entity.ToTable("DistrictOrCity");

            entity.HasIndex(e => new { e.OrganizationId, e.DivisionOrStateId, e.DistrictOrCityName }, "Uk_DistrictOrCity_DistrictOrCityName").IsUnique();

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.DistrictOrCityName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.DistrictOrCityShortName).HasMaxLength(20);
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);

            entity.HasOne(d => d.DivisionOrState).WithMany(p => p.DistrictOrCities)
                .HasForeignKey(d => d.DivisionOrStateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DistrictOrCity_DivisionOrState");

            entity.HasOne(d => d.Organization).WithMany(p => p.DistrictOrCities)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DistrictOrCity_Organizations");
        });

        modelBuilder.Entity<DivisionOrState>(entity =>
        {
            entity.ToTable("DivisionOrState");

            entity.HasIndex(e => new { e.OrganizationId, e.CountryId, e.DivisionOrStateName }, "UK_DivisionOrState_DivisionOrStateName").IsUnique();

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.DivisionOrStateName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.DivisionOrStateShortName).HasMaxLength(20);
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);

            entity.HasOne(d => d.Country).WithMany(p => p.DivisionOrStates)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DivisionOrState_Country");

            entity.HasOne(d => d.Organization).WithMany(p => p.DivisionOrStates)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DivisionOrState_Organizations");
        });

        modelBuilder.Entity<DocumentType>(entity =>
        {
            entity.ToTable("DocumentType");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);

            entity.HasOne(d => d.Organization).WithMany(p => p.DocumentTypes)
                .HasForeignKey(d => d.OrganizationId)
                .HasConstraintName("FK_DocumentType_Organizations");
        });

        modelBuilder.Entity<ExcelDataUpload>(entity =>
        {
            entity.ToTable("ExcelDataUpload");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ProcessingMessage).HasMaxLength(1000);
            entity.Property(e => e.StoredFileName).HasMaxLength(500);
            entity.Property(e => e.StoredFilePath).HasMaxLength(1000);
            entity.Property(e => e.UploadTime).HasColumnType("datetime");
            entity.Property(e => e.UploadedFileName).HasMaxLength(500);

            entity.HasOne(d => d.ExcelUploadedDataType).WithMany(p => p.ExcelDataUploads)
                .HasForeignKey(d => d.ExcelUploadedDataTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ExcelDataUpload_ExcelUploadedDataType");
        });

        modelBuilder.Entity<ExcelSimplifiedLocalPurchase>(entity =>
        {
            entity.ToTable("ExcelSimplifiedLocalPurchase");

            entity.Property(e => e.BranchAddress).HasMaxLength(500);
            entity.Property(e => e.BranchId).HasMaxLength(100);
            entity.Property(e => e.BranchName).HasMaxLength(250);
            entity.Property(e => e.ChallanDate).HasColumnType("datetime");
            entity.Property(e => e.ChallanNo).HasMaxLength(50);
            entity.Property(e => e.ChequeBankName).HasMaxLength(250);
            entity.Property(e => e.ChequeDate).HasColumnType("datetime");
            entity.Property(e => e.ChequeNo).HasMaxLength(50);
            entity.Property(e => e.DiscountPerItem).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.HsCode).HasMaxLength(50);
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.MeasurementUnitName).HasMaxLength(50);
            entity.Property(e => e.PaymentAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentId).HasMaxLength(100);
            entity.Property(e => e.PaymentMethod).HasMaxLength(50);
            entity.Property(e => e.PaymentTransactionId).HasMaxLength(50);
            entity.Property(e => e.PaymentWalletNo).HasMaxLength(20);
            entity.Property(e => e.ProcessingMessage).HasMaxLength(2000);
            entity.Property(e => e.ProductGroupName).HasMaxLength(200);
            entity.Property(e => e.ProductId)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ProductType).HasMaxLength(200);
            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");
            entity.Property(e => e.PurchaseDetailId).HasMaxLength(100);
            entity.Property(e => e.PurchaseId)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Quantity).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SupplementaryDutyPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TdsAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VatPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VatType).HasMaxLength(500);
            entity.Property(e => e.VdsAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VendorAddress).HasMaxLength(500);
            entity.Property(e => e.VendorBin).HasMaxLength(50);
            entity.Property(e => e.VendorEmail).HasMaxLength(100);
            entity.Property(e => e.VendorId).HasMaxLength(100);
            entity.Property(e => e.VendorMobile).HasMaxLength(20);
            entity.Property(e => e.VendorName).HasMaxLength(200);
            entity.Property(e => e.VendorNid).HasMaxLength(50);
            entity.Property(e => e.VendorTin).HasMaxLength(50);

            entity.HasOne(d => d.ExcelDataUpload).WithMany(p => p.ExcelSimplifiedLocalPurchases)
                .HasForeignKey(d => d.ExcelDataUploadId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ExcelSimplifiedLocalPurchase_ExcelDataUpload");
        });

        modelBuilder.Entity<ExcelSimplifiedLocalSaleCalculateByVat>(entity =>
        {
            entity.ToTable("ExcelSimplifiedLocalSaleCalculateByVat");

            entity.Property(e => e.BranchAddress).HasMaxLength(500);
            entity.Property(e => e.BranchId).HasMaxLength(100);
            entity.Property(e => e.BranchName).HasMaxLength(250);
            entity.Property(e => e.CustomerAddress).HasMaxLength(500);
            entity.Property(e => e.CustomerBin).HasMaxLength(50);
            entity.Property(e => e.CustomerEmail).HasMaxLength(100);
            entity.Property(e => e.CustomerId).HasMaxLength(100);
            entity.Property(e => e.CustomerMobile).HasMaxLength(20);
            entity.Property(e => e.CustomerName).HasMaxLength(200);
            entity.Property(e => e.CustomerNid).HasMaxLength(50);
            entity.Property(e => e.CustomerTin).HasMaxLength(50);
            entity.Property(e => e.DeliveryAddress).HasMaxLength(500);
            entity.Property(e => e.DeliveryMethod).HasMaxLength(100);
            entity.Property(e => e.DiscountPerItem).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.EmhCode).HasMaxLength(100);
            entity.Property(e => e.ExportType).HasMaxLength(50);
            entity.Property(e => e.HsCode).HasMaxLength(50);
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.MeasurementUnitName).HasMaxLength(50);
            entity.Property(e => e.ProcessingMessage).HasMaxLength(2000);
            entity.Property(e => e.ProductGroupName).HasMaxLength(200);
            entity.Property(e => e.ProductId)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ProductType).HasMaxLength(200);
            entity.Property(e => e.Quantity).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ReceiverMobile).HasMaxLength(20);
            entity.Property(e => e.ReceiverName).HasMaxLength(100);
            entity.Property(e => e.SalesDate).HasColumnType("datetime");
            entity.Property(e => e.SalesDetailId).HasMaxLength(100);
            entity.Property(e => e.SalesId)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.SalesType).HasMaxLength(50);
            entity.Property(e => e.SupplementaryDutyPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VatPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VatType).HasMaxLength(500);
            entity.Property(e => e.VehicleDriverMobile).HasMaxLength(20);
            entity.Property(e => e.VehicleDriverName).HasMaxLength(100);
            entity.Property(e => e.VehicleRegistrationNo).HasMaxLength(50);
            entity.Property(e => e.VehicleTypeName).HasMaxLength(100);

            entity.HasOne(d => d.ExcelDataUpload).WithMany(p => p.ExcelSimplifiedLocalSaleCalculateByVats)
                .HasForeignKey(d => d.ExcelDataUploadId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ExcelSimplifiedLocalSaleCalculateByVat_ExcelDataUpload");
        });

        modelBuilder.Entity<ExcelSimplifiedPurchase>(entity =>
        {
            entity.ToTable("ExcelSimplifiedPurchase");

            entity.Property(e => e.BranchAddress).HasMaxLength(500);
            entity.Property(e => e.BranchId).HasMaxLength(100);
            entity.Property(e => e.BranchName).HasMaxLength(250);
            entity.Property(e => e.ChallanDate).HasColumnType("datetime");
            entity.Property(e => e.ChallanNo).HasMaxLength(50);
            entity.Property(e => e.ChequeBankName).HasMaxLength(250);
            entity.Property(e => e.ChequeDate).HasColumnType("datetime");
            entity.Property(e => e.ChequeNo).HasMaxLength(50);
            entity.Property(e => e.DiscountPerItem).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.HsCode).HasMaxLength(50);
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.MeasurementUnitName).HasMaxLength(50);
            entity.Property(e => e.PaymentAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentId).HasMaxLength(100);
            entity.Property(e => e.PaymentMethod).HasMaxLength(50);
            entity.Property(e => e.PaymentTransactionId).HasMaxLength(50);
            entity.Property(e => e.PaymentWalletNo).HasMaxLength(20);
            entity.Property(e => e.ProcessingMessage).HasMaxLength(2000);
            entity.Property(e => e.ProductGroupName).HasMaxLength(200);
            entity.Property(e => e.ProductId)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ProductType).HasMaxLength(200);
            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");
            entity.Property(e => e.PurchaseDetailId).HasMaxLength(100);
            entity.Property(e => e.PurchaseId)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.PurchaseType).HasMaxLength(50);
            entity.Property(e => e.Quantity).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SupplementaryDutyPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TdsAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VatPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VatType).HasMaxLength(500);
            entity.Property(e => e.VdsAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VendorAddress).HasMaxLength(500);
            entity.Property(e => e.VendorBin).HasMaxLength(50);
            entity.Property(e => e.VendorId).HasMaxLength(100);
            entity.Property(e => e.VendorName).HasMaxLength(200);
            entity.Property(e => e.VendorNid).HasMaxLength(50);
            entity.Property(e => e.VendorTin).HasMaxLength(50);

            entity.HasOne(d => d.ExcelDataUpload).WithMany(p => p.ExcelSimplifiedPurchases)
                .HasForeignKey(d => d.ExcelDataUploadId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ExcelSimplifiedPurchase_ExcelDataUpload");
        });

        modelBuilder.Entity<ExcelSimplifiedSalse>(entity =>
        {
            entity.ToTable("ExcelSimplifiedSalse");

            entity.Property(e => e.BankDepositDate).HasColumnType("datetime");
            entity.Property(e => e.BranchAddress).HasMaxLength(500);
            entity.Property(e => e.BranchId).HasMaxLength(100);
            entity.Property(e => e.BranchName).HasMaxLength(250);
            entity.Property(e => e.ChequeBankName).HasMaxLength(250);
            entity.Property(e => e.ChequeDate).HasColumnType("datetime");
            entity.Property(e => e.ChequeNo).HasMaxLength(50);
            entity.Property(e => e.CustomerAddress).HasMaxLength(500);
            entity.Property(e => e.CustomerBin).HasMaxLength(50);
            entity.Property(e => e.CustomerEmail).HasMaxLength(100);
            entity.Property(e => e.CustomerId).HasMaxLength(100);
            entity.Property(e => e.CustomerMobile).HasMaxLength(20);
            entity.Property(e => e.CustomerName).HasMaxLength(200);
            entity.Property(e => e.CustomerNid).HasMaxLength(50);
            entity.Property(e => e.CustomerTin).HasMaxLength(50);
            entity.Property(e => e.DeliveryAddress).HasMaxLength(500);
            entity.Property(e => e.DeliveryMethod).HasMaxLength(100);
            entity.Property(e => e.DiscountPerItem).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.EmhCode).HasMaxLength(100);
            entity.Property(e => e.ExportType).HasMaxLength(50);
            entity.Property(e => e.HsCode).HasMaxLength(50);
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.MeasurementUnitName).HasMaxLength(50);
            entity.Property(e => e.MoneyReceiptNumber).HasMaxLength(50);
            entity.Property(e => e.PaymentReceiveAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaymentReceiveDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentReceiveId).HasMaxLength(100);
            entity.Property(e => e.PaymentReceiveMethod).HasMaxLength(50);
            entity.Property(e => e.PaymentTransactionId).HasMaxLength(50);
            entity.Property(e => e.PaymentWalletNo).HasMaxLength(20);
            entity.Property(e => e.ProcessingMessage).HasMaxLength(2000);
            entity.Property(e => e.ProductGroupName).HasMaxLength(200);
            entity.Property(e => e.ProductId)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ProductType).HasMaxLength(200);
            entity.Property(e => e.Quantity).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ReceiverMobile).HasMaxLength(20);
            entity.Property(e => e.ReceiverName).HasMaxLength(100);
            entity.Property(e => e.SalesDate).HasColumnType("datetime");
            entity.Property(e => e.SalesDetailId).HasMaxLength(100);
            entity.Property(e => e.SalesId)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.SalesType).HasMaxLength(50);
            entity.Property(e => e.SupplementaryDutyPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TdsAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VatPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VatType).HasMaxLength(500);
            entity.Property(e => e.VdsAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VehicleDriverMobile).HasMaxLength(20);
            entity.Property(e => e.VehicleDriverName).HasMaxLength(100);
            entity.Property(e => e.VehicleRegistrationNo).HasMaxLength(50);
            entity.Property(e => e.VehicleTypeName).HasMaxLength(100);

            entity.HasOne(d => d.ExcelDataUpload).WithMany(p => p.ExcelSimplifiedSalses)
                .HasForeignKey(d => d.ExcelDataUploadId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ExcelSimplifiedSalse_ExcelDataUpload");
        });

        modelBuilder.Entity<ExcelUploadedDataType>(entity =>
        {
            entity.ToTable("ExcelUploadedDataType");

            entity.Property(e => e.ExcelUploadedDataTypeId).ValueGeneratedNever();
            entity.Property(e => e.ExcelUploadedDataTypeName)
                .IsRequired()
                .HasMaxLength(250)
                .HasColumnName("ExcelUPloadedDataTypeName");
        });

        modelBuilder.Entity<ExportType>(entity =>
        {
            entity.ToTable("ExportType");

            entity.Property(e => e.ExportTypeId).ValueGeneratedNever();
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ExportTypeName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ExportTypeNameInBangla).HasMaxLength(50);
        });

        modelBuilder.Entity<FinancialActivityNature>(entity =>
        {
            entity.ToTable("FinancialActivityNature");

            entity.Property(e => e.FinancialActivityNatureId).ValueGeneratedNever();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NameInBangla)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<InputOutputCoEfficient>(entity =>
        {
            entity.ToTable("InputOutputCoEfficient");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.EffectiveFrom).HasColumnType("datetime");
            entity.Property(e => e.EffectiveTo).HasColumnType("datetime");
            entity.Property(e => e.SubmissionDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<IntegratedApplication>(entity =>
        {
            entity.ToTable("IntegratedApplication");

            entity.HasIndex(e => e.ApplicationKey, "UK_IntegratedApplication_ApplicationKey");

            entity.Property(e => e.ApplicationKey)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ApplicationName)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.ApplicationUrl)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<IntegratedApplicationRefDataType>(entity =>
        {
            entity.ToTable("IntegratedApplicationRefDataType");

            entity.HasIndex(e => e.DataTypeName, "UK_IntegratedApplicationRefDataType_DataTypeName").IsUnique();

            entity.Property(e => e.IntegratedApplicationRefDataTypeId).ValueGeneratedNever();
            entity.Property(e => e.DataTypeName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Description).HasMaxLength(500);
        });

        modelBuilder.Entity<IntegratedApplicationRefDatum>(entity =>
        {
            entity.HasKey(e => e.IntegratedApplicationRefDataId);

            entity.HasIndex(e => new { e.IntegratedApplicationId, e.IntegratedApplicationRefDataTypeId, e.ReferenceKey }, "UK_IntegratedApplicationRefData_App_DataType_RefKey").IsUnique();

            entity.Property(e => e.ReferenceKey)
                .IsRequired()
                .HasMaxLength(200);

            entity.HasOne(d => d.IntegratedApplication).WithMany(p => p.IntegratedApplicationRefData)
                .HasForeignKey(d => d.IntegratedApplicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IntegratedApplicationRefData_IntegratedApplication");

            entity.HasOne(d => d.IntegratedApplicationRefDataType).WithMany(p => p.IntegratedApplicationRefData)
                .HasForeignKey(d => d.IntegratedApplicationRefDataTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IntegratedApplicationRefData_IntegratedApplicationRefDataType");
        });

        modelBuilder.Entity<MeasurementUnit>(entity =>
        {
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
        });

        modelBuilder.Entity<MushakGeneration>(entity =>
        {
            entity.ToTable("MushakGeneration");

            entity.Property(e => e.GenerateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Organization).WithMany(p => p.MushakGenerations)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MushakGeneration_Organizations");
        });

        modelBuilder.Entity<MushakGenerationStage>(entity =>
        {
            entity.ToTable("MushakGenerationStage");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NameInBangla)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<MushakReturnPayment>(entity =>
        {
            entity.ToTable("MushakReturnPayment");

            entity.Property(e => e.BankBranchName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.CustomsAndVatcommissionarateId).HasColumnName("CustomsAndVATCommissionarateId");
            entity.Property(e => e.EconomicCode10thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode11thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode12thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode13thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode1stDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode2ndDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode3rdDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode4thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode5thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode6thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode7thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode8thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode9thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.PaidAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.SubimissionDate).HasColumnType("datetime");
            entity.Property(e => e.SubmissionEntryDate).HasColumnType("datetime");
            entity.Property(e => e.TreasuryChallanNo).HasMaxLength(50);

            entity.HasOne(d => d.BankBranchCountry).WithMany(p => p.MushakReturnPayments)
                .HasForeignKey(d => d.BankBranchCountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MushakReturnPayment_Country");

            entity.HasOne(d => d.BankBranchDistrictOrCity).WithMany(p => p.MushakReturnPayments)
                .HasForeignKey(d => d.BankBranchDistrictOrCityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MushakReturnPayment_DistrictOrCity");

            entity.HasOne(d => d.Bank).WithMany(p => p.MushakReturnPayments)
                .HasForeignKey(d => d.BankId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MushakReturnPayment_Bank");

            entity.HasOne(d => d.CustomsAndVatcommissionarate).WithMany(p => p.MushakReturnPayments)
                .HasForeignKey(d => d.CustomsAndVatcommissionarateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MushakReturnPayment_CustomsAndVATCommissionarate");

            entity.HasOne(d => d.MushakReturnPaymentType).WithMany(p => p.MushakReturnPayments)
                .HasForeignKey(d => d.MushakReturnPaymentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MushakReturnPayment_MushakReturnPaymentType");

            entity.HasOne(d => d.Organization).WithMany(p => p.MushakReturnPayments)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MushakReturnPayment_Organizations");
        });

        modelBuilder.Entity<MushakReturnPaymentForVd>(entity =>
        {
            entity.HasKey(e => e.MushakReturnPaymentForVdsId);

            entity.Property(e => e.VdsPaidAmount).HasColumnType("decimal(26, 8)");

            entity.HasOne(d => d.MushakReturnPayment).WithMany(p => p.MushakReturnPaymentForVds)
                .HasForeignKey(d => d.MushakReturnPaymentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MushakReturnPaymentForVds_MushakReturnPayment");

            entity.HasOne(d => d.Purchase).WithMany(p => p.MushakReturnPaymentForVds)
                .HasForeignKey(d => d.PurchaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MushakReturnPaymentForVds_Purchase");
        });

        modelBuilder.Entity<MushakReturnPaymentType>(entity =>
        {
            entity.ToTable("MushakReturnPaymentType");

            entity.Property(e => e.MushakReturnPaymentTypeId).ValueGeneratedNever();
            entity.Property(e => e.EffectiveFrom)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EffectiveTo).HasColumnType("datetime");
            entity.Property(e => e.NoteNo)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.SubFormId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubFormName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.TypeName)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.TypeNameBn)
                .IsRequired()
                .HasMaxLength(200);

            entity.HasOne(d => d.NbrEconomicCode).WithMany(p => p.MushakReturnPaymentTypes)
                .HasForeignKey(d => d.NbrEconomicCodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MushakReturnPaymentType_NbrEconomicCode");
        });

        modelBuilder.Entity<MushakReturnRefund>(entity =>
        {
            entity.ToTable("MushakReturnRefund");

            entity.HasIndex(e => new { e.OrganizationId, e.MushakYear, e.MushakMonth }, "UK_MushakReturnRefund_Organization_Month").IsUnique();

            entity.Property(e => e.ApprovedToRefundSdamount)
                .HasColumnType("decimal(26, 8)")
                .HasColumnName("ApprovedToRefundSDAmount");
            entity.Property(e => e.ApprovedToRefundVatamount)
                .HasColumnType("decimal(26, 8)")
                .HasColumnName("ApprovedToRefundVATAmount");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.InterestedToRefundSdamount)
                .HasColumnType("decimal(26, 8)")
                .HasColumnName("InterestedToRefundSDAmount");
            entity.Property(e => e.InterestedToRefundVatamount)
                .HasColumnType("decimal(26, 8)")
                .HasColumnName("InterestedToRefundVATAmount");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.RefundedSdamount)
                .HasColumnType("decimal(26, 8)")
                .HasColumnName("RefundedSDAmount");
            entity.Property(e => e.RefundedSdchequeDate)
                .HasColumnType("datetime")
                .HasColumnName("RefundedSDChequeDate");
            entity.Property(e => e.RefundedSdchequeNo)
                .HasMaxLength(50)
                .HasColumnName("RefundedSDChequeNo");
            entity.Property(e => e.RefundedVatamount)
                .HasColumnType("decimal(26, 8)")
                .HasColumnName("RefundedVATAmount");
            entity.Property(e => e.RefundedVatchequeDate)
                .HasColumnType("datetime")
                .HasColumnName("RefundedVATChequeDate");
            entity.Property(e => e.RefundedVatchequeNo)
                .HasMaxLength(50)
                .HasColumnName("RefundedVATChequeNo");

            entity.HasOne(d => d.Organization).WithMany(p => p.MushakReturnRefunds)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MushakReturnRefund_Organizations");
        });

        modelBuilder.Entity<MushakSubmission>(entity =>
        {
            entity.ToTable("MushakSubmission");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.GenerateDate).HasColumnType("datetime");
            entity.Property(e => e.SubmissionDate).HasColumnType("datetime");

            entity.HasOne(d => d.MushakSubmissionType).WithMany(p => p.MushakSubmissions)
                .HasForeignKey(d => d.MushakSubmissionTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MushakSubmission_MushakSubmissionType");

            entity.HasOne(d => d.Organization).WithMany(p => p.MushakSubmissions)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MushakSubmission_Organizations");
        });

        modelBuilder.Entity<MushakSubmissionType>(entity =>
        {
            entity.ToTable("MushakSubmissionType");

            entity.Property(e => e.SubmissionTypeName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.SubmissionTypeNameBn)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<NbrEconomicCode>(entity =>
        {
            entity.ToTable("NbrEconomicCode");

            entity.Property(e => e.NbrEconomicCodeId).ValueGeneratedNever();
            entity.Property(e => e.Code10thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.Code11thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.Code12thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.Code13thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.Code1stDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.Code2ndDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.Code3rdDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.Code4thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.Code5thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.Code6thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.Code7thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.Code8thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.Code9thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.EconomicTitle)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.EffectiveFrom)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EffectiveTo).HasColumnType("datetime");
            entity.Property(e => e.UpdatedEconomicCode).HasMaxLength(200);

            entity.HasOne(d => d.NbrEconomicCodeType).WithMany(p => p.NbrEconomicCodes)
                .HasForeignKey(d => d.NbrEconomicCodeTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NbrEconomicCode_NbrEconomicCodeType");
        });

        modelBuilder.Entity<NbrEconomicCodeType>(entity =>
        {
            entity.ToTable("NbrEconomicCodeType");

            entity.Property(e => e.NbrEconomicCodeTypeId).ValueGeneratedNever();
            entity.Property(e => e.CodeTypeName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<ObjectType>(entity =>
        {
            entity.ToTable("ObjectType");

            entity.Property(e => e.ObjectTypeId).ValueGeneratedNever();
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<OldAccountCurrentBalance>(entity =>
        {
            entity.ToTable("OldAccountCurrentBalance");

            entity.HasIndex(e => new { e.OrganizationId, e.MushakYear, e.MushakMonth }, "UK_OldAccountCurrentBalance_Organization_Month").IsUnique();

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.RemainingSdbalance)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RemainingSDBalance");
            entity.Property(e => e.RemainingVatbalance)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RemainingVATBalance");

            entity.HasOne(d => d.Organization).WithMany(p => p.OldAccountCurrentBalances)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OldAccountCurrentBalance_Organizations");
        });

        modelBuilder.Entity<OrgBranch>(entity =>
        {
            entity.ToTable("OrgBranch");

            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.BusinessCategoryDescription).HasMaxLength(500);
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.CustomsAndVatcommissionarateId).HasColumnName("CustomsAndVATCommissionarateId");
            entity.Property(e => e.EmailAddress).HasMaxLength(100);
            entity.Property(e => e.Mobile).HasMaxLength(20);
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.VatResponsiblePersonDesignation)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.VatResponsiblePersonEmailAddress)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.VatResponsiblePersonMobileNo)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.VatResponsiblePersonName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.VatResponsiblePersonSignUrl).HasMaxLength(500);

            entity.HasOne(d => d.Country).WithMany(p => p.OrgBranches)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrgBranch_Country");

            entity.HasOne(d => d.District).WithMany(p => p.OrgBranches)
                .HasForeignKey(d => d.DistrictId)
                .HasConstraintName("FK_OrgBranch_District");

            entity.HasOne(d => d.OrgBranchType).WithMany(p => p.OrgBranches)
                .HasForeignKey(d => d.OrgBranchTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrgBranch_OrgBranchType");

            entity.HasOne(d => d.Organization).WithMany(p => p.OrgBranches)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrgBranch_Organizations");
        });

        modelBuilder.Entity<OrgBranchType>(entity =>
        {
            entity.ToTable("OrgBranchType");

            entity.Property(e => e.OrgBranchTypeId).ValueGeneratedNever();
            entity.Property(e => e.BranchTypeName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.BranchTypeNameBangla)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<OrgStaticDataType>(entity =>
        {
            entity.ToTable("OrgStaticDataType");

            entity.Property(e => e.OrgStaticDataTypeId).ValueGeneratedNever();
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<OrgStaticDatum>(entity =>
        {
            entity.HasKey(e => e.OrgStaticDataId);

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.EffectiveFrom).HasColumnType("datetime");
            entity.Property(e => e.EffectiveTo).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);

            entity.HasOne(d => d.OrgStaticDataType).WithMany(p => p.OrgStaticData)
                .HasForeignKey(d => d.OrgStaticDataTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrgStaticData_OrgStaticDataType");

            entity.HasOne(d => d.Organization).WithMany(p => p.OrgStaticData)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrgStaticData_Organizations");
        });

        modelBuilder.Entity<Organization>(entity =>
        {
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Bin)
                .HasMaxLength(50)
                .HasColumnName("BIN");
            entity.Property(e => e.BusinessCategoryDescription).HasMaxLength(500);
            entity.Property(e => e.CertificateNo).HasMaxLength(50);
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.CustomsAndVatcommissionarateId).HasColumnName("CustomsAndVATCommissionarateId");
            entity.Property(e => e.EmailAddress).HasMaxLength(100);
            entity.Property(e => e.InvoiceNameBan).HasMaxLength(50);
            entity.Property(e => e.InvoiceNameEng).HasMaxLength(50);
            entity.Property(e => e.Mobile).HasMaxLength(20);
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.ServiceChargePercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VatResponsiblePersonDesignation)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.VatResponsiblePersonEmailAddress)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.VatResponsiblePersonMobileNo)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.VatResponsiblePersonName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.VatResponsiblePersonSignUrl).HasMaxLength(500);
            entity.Property(e => e.VatregNo)
                .HasMaxLength(50)
                .HasColumnName("VATRegNo");

            entity.HasOne(d => d.BusinessCategory).WithMany(p => p.Organizations)
                .HasForeignKey(d => d.BusinessCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Organizations_BusinessCategory");

            entity.HasOne(d => d.BusinessNature).WithMany(p => p.Organizations)
                .HasForeignKey(d => d.BusinessNatureId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Organizations_BusinessNature");

            entity.HasOne(d => d.CustomsAndVatcommissionarate).WithMany(p => p.Organizations)
                .HasForeignKey(d => d.CustomsAndVatcommissionarateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Organizations_CustomsAndVATCommissionarate");

            entity.HasOne(d => d.FinancialActivityNature).WithMany(p => p.Organizations)
                .HasForeignKey(d => d.FinancialActivityNatureId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Organizations_FinancialActivityNature");
        });

        modelBuilder.Entity<OrganizationConfig>(entity =>
        {
            entity.ToTable("OrganizationConfig");

            entity.Property(e => e.ConfigValue)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.EffectiveFrom).HasColumnType("datetime");
            entity.Property(e => e.EffectiveTo).HasColumnType("datetime");

            entity.HasOne(d => d.OrganizationConfigType).WithMany(p => p.OrganizationConfigs)
                .HasForeignKey(d => d.OrganizationConfigTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrganizationConfig_OrganizationConfigType");

            entity.HasOne(d => d.Organization).WithMany(p => p.OrganizationConfigs)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrganizationConfig_Organizations");
        });

        modelBuilder.Entity<OrganizationConfigType>(entity =>
        {
            entity.ToTable("OrganizationConfigType");

            entity.Property(e => e.OrganizationConfigTypeId).ValueGeneratedNever();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<OrganizationConfigurationArea>(entity =>
        {
            entity.ToTable("OrganizationConfigurationArea");

            entity.Property(e => e.OrganizationConfigurationAreaId).ValueGeneratedNever();
            entity.Property(e => e.OrganizationConfigurationAreaName)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<OrganizationConfigurationBoolean>(entity =>
        {
            entity.ToTable("OrganizationConfigurationBoolean");

            entity.HasIndex(e => new { e.OrganizationConfigurationBooleanTypeId, e.OrganizationId }, "UK_OrganizationConfigurationBoolean").IsUnique();
        });

        modelBuilder.Entity<OrganizationConfigurationBooleanType>(entity =>
        {
            entity.ToTable("OrganizationConfigurationBooleanType");

            entity.Property(e => e.OrganizationConfigurationBooleanTypeId).ValueGeneratedNever();
            entity.Property(e => e.OrganizationConfigurationBooleanTypeName)
                .IsRequired()
                .HasMaxLength(250);

            entity.HasOne(d => d.OrganizationConfigurationArea).WithMany(p => p.OrganizationConfigurationBooleanTypes)
                .HasForeignKey(d => d.OrganizationConfigurationAreaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrganizationConfigurationBooleanType_OrganizationConfigurationArea");
        });

        modelBuilder.Entity<OrganizationConfigurationDecimalType>(entity =>
        {
            entity.ToTable("OrganizationConfigurationDecimalType");

            entity.Property(e => e.OrganizationConfigurationDecimalTypeId).ValueGeneratedNever();
            entity.Property(e => e.DefaultValue).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.OrganizationConfigurationDecimalTypeName)
                .IsRequired()
                .HasMaxLength(250);

            entity.HasOne(d => d.OrganizationConfigurationArea).WithMany(p => p.OrganizationConfigurationDecimalTypes)
                .HasForeignKey(d => d.OrganizationConfigurationAreaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrganizationConfigurationDecimalType_OrganizationConfigurationArea");
        });

        modelBuilder.Entity<OrganizationConfigurationIntType>(entity =>
        {
            entity.ToTable("OrganizationConfigurationIntType");

            entity.Property(e => e.OrganizationConfigurationIntTypeId).ValueGeneratedNever();
            entity.Property(e => e.OrganizationConfigurationIntTypeName)
                .IsRequired()
                .HasMaxLength(250);

            entity.HasOne(d => d.OrganizationConfigurationArea).WithMany(p => p.OrganizationConfigurationIntTypes)
                .HasForeignKey(d => d.OrganizationConfigurationAreaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrganizationConfigurationIntType_OrganizationConfigurationArea");
        });

        modelBuilder.Entity<OrganizationConfigurationStringType>(entity =>
        {
            entity.ToTable("OrganizationConfigurationStringType");

            entity.Property(e => e.OrganizationConfigurationStringTypeId).ValueGeneratedNever();
            entity.Property(e => e.DefaultValue)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.OrganizationConfigurationStringTypeName)
                .IsRequired()
                .HasMaxLength(250);

            entity.HasOne(d => d.OrganizationConfigurationArea).WithMany(p => p.OrganizationConfigurationStringTypes)
                .HasForeignKey(d => d.OrganizationConfigurationAreaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrganizationConfigurationStringType_OrganizationConfigurationArea");
        });

        modelBuilder.Entity<OverHeadCost>(entity =>
        {
            entity.ToTable("OverHeadCost");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
        });

        modelBuilder.Entity<PaymentMethod>(entity =>
        {
            entity.ToTable("PaymentMethod");

            entity.Property(e => e.PaymentMethodId).ValueGeneratedNever();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<PaymentReason>(entity =>
        {
            entity.ToTable("PaymentReason");

            entity.Property(e => e.PaymentReasonId).ValueGeneratedNever();
            entity.Property(e => e.ReasonName)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<PriceSetup>(entity =>
        {
            entity.ToTable("PriceSetup");

            entity.Property(e => e.BaseTp)
                .HasColumnType("decimal(26, 8)")
                .HasColumnName("BaseTP");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.EffectiveFrom).HasColumnType("datetime");
            entity.Property(e => e.EffectiveTo).HasColumnType("datetime");
            entity.Property(e => e.Mrp)
                .HasColumnType("decimal(26, 8)")
                .HasColumnName("MRP");
            entity.Property(e => e.MushakSubmissionDate).HasColumnType("datetime");
            entity.Property(e => e.ProfitAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.PurchaseUnitPrice).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.SalesUnitPrice).HasColumnType("decimal(26, 8)");

            entity.HasOne(d => d.MeasurementUnit).WithMany(p => p.PriceSetups)
                .HasForeignKey(d => d.MeasurementUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PriceSetup_MeasurementUnits");

            entity.HasOne(d => d.Organization).WithMany(p => p.PriceSetups)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PriceSetup_Organizations");

            entity.HasOne(d => d.Product).WithMany(p => p.PriceSetups)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PriceSetup_Products");
        });

        modelBuilder.Entity<PriceSetupProductCost>(entity =>
        {
            entity.ToTable("PriceSetupProductCost");

            entity.Property(e => e.ConversionRatio).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.Cost).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.RequiredQty).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.WastagePercentage).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.MeasurementUnit).WithMany(p => p.PriceSetupProductCosts)
                .HasForeignKey(d => d.MeasurementUnitId)
                .HasConstraintName("FK_PriceSetupProductCost_MeasurementUnits");

            entity.HasOne(d => d.OverHeadCost).WithMany(p => p.PriceSetupProductCosts)
                .HasForeignKey(d => d.OverHeadCostId)
                .HasConstraintName("FK_PriceSetupProductCost_OverHeadCost");

            entity.HasOne(d => d.PriceSetup).WithMany(p => p.PriceSetupProductCosts)
                .HasForeignKey(d => d.PriceSetupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PriceSetupProductCost_PriceSetup");

            entity.HasOne(d => d.RawMaterial).WithMany(p => p.PriceSetupProductCosts)
                .HasForeignKey(d => d.RawMaterialId)
                .HasConstraintName("FK_PriceSetupProductCost_Products");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.Color).HasMaxLength(100);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.DeviceModel).HasMaxLength(50);
            entity.Property(e => e.EffectiveFrom).HasColumnType("datetime");
            entity.Property(e => e.EffectiveTo).HasColumnType("datetime");
            entity.Property(e => e.Hscode)
                .HasMaxLength(50)
                .HasColumnName("HSCode");
            entity.Property(e => e.ModelNo).HasMaxLength(50);
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.ModifyDate).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.PartCode).HasMaxLength(100);
            entity.Property(e => e.PartNo).HasMaxLength(100);
            entity.Property(e => e.ProductNumber).HasMaxLength(50);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.Size).HasMaxLength(100);
            entity.Property(e => e.Specification).HasMaxLength(100);
            entity.Property(e => e.TotalQuantity).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.Variant).HasMaxLength(100);
            entity.Property(e => e.Weight).HasMaxLength(100);
            entity.Property(e => e.WeightInKg).HasColumnType("decimal(26, 8)");

            entity.HasOne(d => d.Brand).WithMany(p => p.Products)
                .HasForeignKey(d => d.BrandId)
                .HasConstraintName("FK_Products_Brand");

            entity.HasOne(d => d.MeasurementUnit).WithMany(p => p.Products)
                .HasForeignKey(d => d.MeasurementUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Products_MeasurementUnits");

            entity.HasOne(d => d.Organization).WithMany(p => p.Products)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Products_Organizations");

            entity.HasOne(d => d.ProductCategory).WithMany(p => p.Products)
                .HasForeignKey(d => d.ProductCategoryId)
                .HasConstraintName("FK_Products_ProductCategory");

            entity.HasOne(d => d.ProductGroup).WithMany(p => p.Products)
                .HasForeignKey(d => d.ProductGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Products_ProductGroups");

            entity.HasOne(d => d.ProductType).WithMany(p => p.Products)
                .HasForeignKey(d => d.ProductTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Products_ProductType");
        });

        modelBuilder.Entity<ProductCategory>(entity =>
        {
            entity.ToTable("ProductCategory");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);

            entity.HasOne(d => d.Organization).WithMany(p => p.ProductCategories)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductCategory_Organizations");
        });

        modelBuilder.Entity<ProductGroup>(entity =>
        {
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Node).HasMaxLength(50);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);

            entity.HasOne(d => d.Organization).WithMany(p => p.ProductGroups)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductGroups_Organizations");
        });

        modelBuilder.Entity<ProductMeasurementUnit>(entity =>
        {
            entity.ToTable("ProductMeasurementUnit");

            entity.Property(e => e.ConversionRatio).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

            entity.HasOne(d => d.MeasurementUnit).WithMany(p => p.ProductMeasurementUnits)
                .HasForeignKey(d => d.MeasurementUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductMeasurementUnit_MeasurementUnits");

            entity.HasOne(d => d.Organization).WithMany(p => p.ProductMeasurementUnits)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductMeasurementUnit_Organizations");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductMeasurementUnits)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductMeasurementUnit_Products");
        });

        modelBuilder.Entity<ProductOpeningBalance>(entity =>
        {
            entity.ToTable("ProductOpeningBalance");

            entity.Property(e => e.ConversionRatio).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Quantity).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.ReferenceNo).HasMaxLength(100);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(26, 8)");

            entity.HasOne(d => d.MeasurementUnit).WithMany(p => p.ProductOpeningBalances)
                .HasForeignKey(d => d.MeasurementUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductOpeningBalance_MeasurementUnits");

            entity.HasOne(d => d.OrgBranch).WithMany(p => p.ProductOpeningBalances)
                .HasForeignKey(d => d.OrgBranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductOpeningBalance_OrgBranch");

            entity.HasOne(d => d.Organization).WithMany(p => p.ProductOpeningBalances)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductOpeningBalance_Organizations");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductOpeningBalances)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductOpeningBalance_Products");
        });

        modelBuilder.Entity<ProductTransactionBook>(entity =>
        {
            entity.ToTable("ProductTransactionBook");

            entity.Property(e => e.InitQty).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.InitUnitPrice).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TransactionTime).HasColumnType("datetime");

            entity.HasOne(d => d.BranchTransferReceiveDetail).WithMany(p => p.ProductTransactionBooks)
                .HasForeignKey(d => d.BranchTransferReceiveDetailId)
                .HasConstraintName("FK_ProductTransactionBook_BranchTransferReceiveDetails");

            entity.HasOne(d => d.BranchTransferSendDetail).WithMany(p => p.ProductTransactionBooks)
                .HasForeignKey(d => d.BranchTransferSendDetailId)
                .HasConstraintName("FK_ProductTransactionBook_BranchTransferSendDetails");

            entity.HasOne(d => d.ByProductReceive).WithMany(p => p.ProductTransactionBooks)
                .HasForeignKey(d => d.ByProductReceiveId)
                .HasConstraintName("FK_ProductTransactionBook_ByProductReceive");

            entity.HasOne(d => d.CreditNoteDetail).WithMany(p => p.ProductTransactionBooks)
                .HasForeignKey(d => d.CreditNoteDetailId)
                .HasConstraintName("FK_ProductTransactionBook_CreditNoteDetail");

            entity.HasOne(d => d.DamageDetail).WithMany(p => p.ProductTransactionBooks)
                .HasForeignKey(d => d.DamageDetailId)
                .HasConstraintName("FK_ProductTransactionBook_DamageDetail");

            entity.HasOne(d => d.DebitNoteDetail).WithMany(p => p.ProductTransactionBooks)
                .HasForeignKey(d => d.DebitNoteDetailId)
                .HasConstraintName("FK_ProductTransactionBook_DebitNoteDetail");

            entity.HasOne(d => d.InitProductMeasurementUnit).WithMany(p => p.ProductTransactionBooks)
                .HasForeignKey(d => d.InitProductMeasurementUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductTransactionBook_MeasurementUnits");

            entity.HasOne(d => d.OrgBranch).WithMany(p => p.ProductTransactionBooks)
                .HasForeignKey(d => d.OrgBranchId)
                .HasConstraintName("FK_ProductTransactionBook_OrgBranch");

            entity.HasOne(d => d.Organization).WithMany(p => p.ProductTransactionBooks)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductTransactionBook_Organizations");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductTransactionBooks)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductTransactionBook_Products");

            entity.HasOne(d => d.ProductOpeningBalance).WithMany(p => p.ProductTransactionBooks)
                .HasForeignKey(d => d.ProductOpeningBalanceId)
                .HasConstraintName("FK_ProductTransactionBook_ProductOpeningBalance");

            entity.HasOne(d => d.ProductUsedInService).WithMany(p => p.ProductTransactionBooks)
                .HasForeignKey(d => d.ProductUsedInServiceId)
                .HasConstraintName("FK_ProductTransactionBook_ProductUsedInService");

            entity.HasOne(d => d.ProductionReceive).WithMany(p => p.ProductTransactionBooks)
                .HasForeignKey(d => d.ProductionReceiveId)
                .HasConstraintName("FK_ProductTransactionBook_ProductionReceive");

            entity.HasOne(d => d.PurchaseDetail).WithMany(p => p.ProductTransactionBooks)
                .HasForeignKey(d => d.PurchaseDetailId)
                .HasConstraintName("FK_ProductTransactionBook_PurchaseDetails");

            entity.HasOne(d => d.SalesDetail).WithMany(p => p.ProductTransactionBooks)
                .HasForeignKey(d => d.SalesDetailId)
                .HasConstraintName("FK_ProductTransactionBook_SalesDetails");

            entity.HasOne(d => d.UsedInProduction).WithMany(p => p.ProductTransactionBooks)
                .HasForeignKey(d => d.UsedInProductionId)
                .HasConstraintName("FK_ProductTransactionBook_BillOfMaterial");
        });

        modelBuilder.Entity<ProductType>(entity =>
        {
            entity.ToTable("ProductType");

            entity.Property(e => e.ProductTypeId).ValueGeneratedNever();
            entity.Property(e => e.Description).HasMaxLength(250);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ShortName)
                .IsRequired()
                .HasMaxLength(10);
        });

        modelBuilder.Entity<ProductUsedInService>(entity =>
        {
            entity.ToTable("ProductUsedInService");

            entity.Property(e => e.ConversionRatio).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Quantity).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(26, 8)");

            entity.HasOne(d => d.Customer).WithMany(p => p.ProductUsedInServices)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductUsedInService_Customer");

            entity.HasOne(d => d.MeasurementUnit).WithMany(p => p.ProductUsedInServices)
                .HasForeignKey(d => d.MeasurementUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductUsedInService_MeasurementUnits");

            entity.HasOne(d => d.OrgBranch).WithMany(p => p.ProductUsedInServices)
                .HasForeignKey(d => d.OrgBranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductUsedInService_OrgBranch");

            entity.HasOne(d => d.Organization).WithMany(p => p.ProductUsedInServices)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductUsedInService_Organizations");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductUsedInServices)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductUsedInService_Products");
        });

        modelBuilder.Entity<ProductVat>(entity =>
        {
            entity.HasKey(e => e.ProductVatid).HasName("PK_ProductVAT");

            entity.ToTable("ProductVATs");

            entity.Property(e => e.ProductVatid).HasColumnName("ProductVATId");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.EffectiveFrom).HasColumnType("datetime");
            entity.Property(e => e.EffectiveTo).HasColumnType("datetime");
            entity.Property(e => e.ProductDefaultVatPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ProductVattypeId).HasColumnName("ProductVATTypeId");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductVats)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductVATs_Products");

            entity.HasOne(d => d.ProductVattype).WithMany(p => p.ProductVats)
                .HasForeignKey(d => d.ProductVattypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductVATs_ProductVATTypes");
        });

        modelBuilder.Entity<ProductVattype>(entity =>
        {
            entity.HasKey(e => e.ProductVattypeId).HasName("PK_ProductVATType");

            entity.ToTable("ProductVATTypes");

            entity.Property(e => e.ProductVattypeId)
                .ValueGeneratedNever()
                .HasColumnName("ProductVATTypeId");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.DefaultVatPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.EffectiveFrom).HasColumnType("datetime");
            entity.Property(e => e.EffectiveTo).HasColumnType("datetime");
            entity.Property(e => e.ExportNote).HasMaxLength(50);
            entity.Property(e => e.ExportNoteInBn).HasMaxLength(50);
            entity.Property(e => e.ImportNote).HasMaxLength(50);
            entity.Property(e => e.ImportNoteInBn).HasMaxLength(50);
            entity.Property(e => e.IsRequireVds).HasColumnName("IsRequireVDS");
            entity.Property(e => e.IsVatapplicable).HasColumnName("IsVATApplicable");
            entity.Property(e => e.LocalPurchaseNote).HasMaxLength(50);
            entity.Property(e => e.LocalPurchaseNoteInBn).HasMaxLength(50);
            entity.Property(e => e.LocalSaleNote).HasMaxLength(50);
            entity.Property(e => e.LocalSaleNoteInBn).HasMaxLength(50);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.NameInBangla)
                .IsRequired()
                .HasMaxLength(500);
        });

        modelBuilder.Entity<ProductionReceive>(entity =>
        {
            entity.ToTable("ProductionReceive");

            entity.Property(e => e.BatchNo).HasMaxLength(50);
            entity.Property(e => e.ContractualProductionChallanNo).HasMaxLength(50);
            entity.Property(e => e.ConversionRatio).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.MaterialCost).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.PriceSetupId).HasDefaultValue(2);
            entity.Property(e => e.ReceiveQuantity).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ReceiveTime).HasColumnType("datetime");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);

            entity.HasOne(d => d.ContractualProduction).WithMany(p => p.ProductionReceives)
                .HasForeignKey(d => d.ContractualProductionId)
                .HasConstraintName("FK_ProductionReceive_ContractualProduction");

            entity.HasOne(d => d.MeasurementUnit).WithMany(p => p.ProductionReceives)
                .HasForeignKey(d => d.MeasurementUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductionReceive_MeasurementUnits");

            entity.HasOne(d => d.OrgBranch).WithMany(p => p.ProductionReceives)
                .HasForeignKey(d => d.OrgBranchId)
                .HasConstraintName("FK_ProductionReceive_OrgBranch");

            entity.HasOne(d => d.Organization).WithMany(p => p.ProductionReceives)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductionReceive_Organizations");

            entity.HasOne(d => d.PriceSetup).WithMany(p => p.ProductionReceives)
                .HasForeignKey(d => d.PriceSetupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductionReceive_PriceSetup");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductionReceives)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductionReceive_Products");
        });

        modelBuilder.Entity<Purchase>(entity =>
        {
            entity.ToTable("Purchase");

            entity.Property(e => e.AdvanceTaxPaidAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ApproveMessage).HasMaxLength(500);
            entity.Property(e => e.AtpbankBranchName)
                .HasMaxLength(250)
                .HasColumnName("ATPBankBranchName");
            entity.Property(e => e.AtpbankId)
                .HasComment("")
                .HasColumnName("ATPBankId");
            entity.Property(e => e.AtpchallanNo)
                .HasMaxLength(20)
                .HasColumnName("ATPChallanNo");
            entity.Property(e => e.Atpdate)
                .HasComment("")
                .HasColumnType("datetime")
                .HasColumnName("ATPDate");
            entity.Property(e => e.AtpnbrEconomicCodeId)
                .HasComment("")
                .HasColumnName("ATPNbrEconomicCodeId");
            entity.Property(e => e.BillOfEntry).HasMaxLength(50);
            entity.Property(e => e.BillOfEntryDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.CustomsAndVatcommissionarateId).HasColumnName("CustomsAndVATCommissionarateId");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DiscountOnTotalPrice).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.DueAmount)
                .HasComputedColumnSql("(CONVERT([decimal](21,2),case when [PurchaseTypeId]=(2) then [TotalPriceWithoutVat]-[DiscountOnTotalPrice] else ((([TotalPriceWithoutVat]+[TotalVAT])+[TotalSupplementaryDuty])-[DiscountOnTotalPrice])-[TotalDiscountOnIndividualProduct] end)-[PaidAmount])", false)
                .HasColumnType("decimal(28, 8)");
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.ExpectedDeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.IsVdsamountPaid).HasColumnName("IsVDSAmountPaid");
            entity.Property(e => e.IsVdscertificatePrinted).HasColumnName("IsVDSCertificatePrinted");
            entity.Property(e => e.LcDate).HasColumnType("datetime");
            entity.Property(e => e.LcNo).HasMaxLength(50);
            entity.Property(e => e.LcaNumber).HasMaxLength(50);
            entity.Property(e => e.LcafNumber).HasMaxLength(50);
            entity.Property(e => e.PaidAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.PayableAmount)
                .HasComputedColumnSql("(CONVERT([decimal](21,2),case when [PurchaseTypeId]=(2) then [TotalPriceWithoutVat]-[DiscountOnTotalPrice] else ((([TotalPriceWithoutVat]+[TotalVAT])+[TotalSupplementaryDuty])-[DiscountOnTotalPrice])-[TotalDiscountOnIndividualProduct] end))", false)
                .HasColumnType("decimal(21, 2)");
            entity.Property(e => e.PoNumber).HasMaxLength(50);
            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");
            entity.Property(e => e.PurchaseRemarks).HasMaxLength(500);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.RejectMessage).HasMaxLength(500);
            entity.Property(e => e.TdsAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TdsCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.TdsCertificateNo).HasMaxLength(50);
            entity.Property(e => e.TdsDate).HasColumnType("datetime");
            entity.Property(e => e.TdsNote).HasMaxLength(500);
            entity.Property(e => e.TdsPaymentBookTransferNo).HasMaxLength(50);
            entity.Property(e => e.TermsOfLc).HasMaxLength(500);
            entity.Property(e => e.TotalAdvanceIncomeTax).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TotalAdvanceTax).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TotalCustomDuty).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TotalDiscountOnIndividualProduct).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TotalImportDuty).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TotalPriceWithoutVat).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TotalRegulatoryDuty).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TotalSupplementaryDuty).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TotalVat)
                .HasColumnType("decimal(26, 8)")
                .HasColumnName("TotalVAT");
            entity.Property(e => e.VatChallanIssueDate).HasColumnType("datetime");
            entity.Property(e => e.VatChallanNo).HasMaxLength(50);
            entity.Property(e => e.Vdsamount)
                .HasColumnType("decimal(26, 8)")
                .HasColumnName("VDSAmount");
            entity.Property(e => e.VdscertificateDate)
                .HasColumnType("datetime")
                .HasColumnName("VDSCertificateDate");
            entity.Property(e => e.VdscertificateNo)
                .HasMaxLength(50)
                .HasColumnName("VDSCertificateNo");
            entity.Property(e => e.Vdsdate)
                .HasColumnType("datetime")
                .HasColumnName("VDSDate");
            entity.Property(e => e.Vdsnote)
                .HasMaxLength(500)
                .HasColumnName("VDSNote");
            entity.Property(e => e.VdspaymentBookTransferNo)
                .HasMaxLength(50)
                .HasColumnName("VDSPaymentBookTransferNo");
            entity.Property(e => e.VendorAddress).HasMaxLength(500);
            entity.Property(e => e.VendorBin).HasMaxLength(50);
            entity.Property(e => e.VendorContactNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VendorInvoiceNo).HasMaxLength(50);
            entity.Property(e => e.VendorName).HasMaxLength(200);
            entity.Property(e => e.VendorNid).HasMaxLength(50);
            entity.Property(e => e.VoucherNo).HasMaxLength(50);

            entity.HasOne(d => d.Atpbank).WithMany(p => p.Purchases)
                .HasForeignKey(d => d.AtpbankId)
                .HasConstraintName("FK_Purchase_Bank");

            entity.HasOne(d => d.AtpnbrEconomicCode).WithMany(p => p.Purchases)
                .HasForeignKey(d => d.AtpnbrEconomicCodeId)
                .HasConstraintName("FK_Purchase_NbrEconomicCodeATPNbrEconomicCodeId");

            entity.HasOne(d => d.CustomsAndVatcommissionarate).WithMany(p => p.Purchases)
                .HasForeignKey(d => d.CustomsAndVatcommissionarateId)
                .HasConstraintName("FK_Purchase_CustomsAndVATCommissionarate");

            entity.HasOne(d => d.OrgBranch).WithMany(p => p.Purchases)
                .HasForeignKey(d => d.OrgBranchId)
                .HasConstraintName("FK_Purchase_OrgBranch");

            entity.HasOne(d => d.Organization).WithMany(p => p.PurchaseOrganizations)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Purchase_Organizations");

            entity.HasOne(d => d.PurchaseReason).WithMany(p => p.Purchases)
                .HasForeignKey(d => d.PurchaseReasonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Purchase_PurchaseReason");

            entity.HasOne(d => d.PurchaseType).WithMany(p => p.Purchases)
                .HasForeignKey(d => d.PurchaseTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Purchase_PurchaseTypes");

            entity.HasOne(d => d.TransferBranch).WithMany(p => p.PurchaseTransferBranches)
                .HasForeignKey(d => d.TransferBranchId)
                .HasConstraintName("FK_Purchase_Organizations_TransferBranch");

            entity.HasOne(d => d.TransferSales).WithMany(p => p.Purchases)
                .HasForeignKey(d => d.TransferSalesId)
                .HasConstraintName("FK_Purchase_Sales_Transfer");

            entity.HasOne(d => d.Vendor).WithMany(p => p.Purchases)
                .HasForeignKey(d => d.VendorId)
                .HasConstraintName("FK_Purchase_Vendor");
        });

        modelBuilder.Entity<PurchaseDetail>(entity =>
        {
            entity.Property(e => e.AdvanceIncomeTaxPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AdvanceTaxPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ConversionRatio).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.CustomDutyPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DiscountPerItem).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.GoodsId).HasMaxLength(50);
            entity.Property(e => e.Hscode)
                .HasMaxLength(50)
                .HasColumnName("HSCode");
            entity.Property(e => e.ImportDutyPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PartNo).HasMaxLength(100);
            entity.Property(e => e.ProductCode).HasMaxLength(50);
            entity.Property(e => e.ProductDescription).HasMaxLength(500);
            entity.Property(e => e.ProductVattypeId).HasColumnName("ProductVATTypeId");
            entity.Property(e => e.Quantity).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.RegulatoryDutyPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Skuid)
                .HasMaxLength(50)
                .HasColumnName("SKUId");
            entity.Property(e => e.Skuno)
                .HasMaxLength(50)
                .HasColumnName("SKUNo");
            entity.Property(e => e.SupplementaryDutyPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TdsPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.Vatpercent)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VATPercent");

            entity.HasOne(d => d.MeasurementUnit).WithMany(p => p.PurchaseDetails)
                .HasForeignKey(d => d.MeasurementUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseDetails_MeasurementUnits");

            entity.HasOne(d => d.Product).WithMany(p => p.PurchaseDetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseDetails_Products");

            entity.HasOne(d => d.ProductVattype).WithMany(p => p.PurchaseDetails)
                .HasForeignKey(d => d.ProductVattypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseDetails_ProductVATTypes");

            entity.HasOne(d => d.Purchase).WithMany(p => p.PurchaseDetails)
                .HasForeignKey(d => d.PurchaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseDetails_Purchase");
        });

        modelBuilder.Entity<PurchaseImportTariff>(entity =>
        {
            entity.ToTable("PurchaseImportTariff");

            entity.HasIndex(e => e.HsCode, "IX_PurchaseImportTariff_HsCode");

            entity.Property(e => e.PurchaseImportTariffId).ValueGeneratedNever();
            entity.Property(e => e.AitPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AtPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CdPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.EffectiveFrom).HasColumnType("datetime");
            entity.Property(e => e.EffectiveTo).HasColumnType("datetime");
            entity.Property(e => e.HsCode)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.IdPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ItemDescription)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.RdPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SdPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TtiPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VatPercent).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<PurchaseImportTaxPayment>(entity =>
        {
            entity.ToTable("PurchaseImportTaxPayment");

            entity.Property(e => e.PitpAccCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PitpBankBranchName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.PitpDocOrChallanDate).HasColumnType("datetime");
            entity.Property(e => e.PitpDocOrChallanNo)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PitpPaidAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.PitpPaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PitpPaymentRemarks).HasMaxLength(250);

            entity.HasOne(d => d.PitpBankBranchDistrict).WithMany(p => p.PurchaseImportTaxPayments)
                .HasForeignKey(d => d.PitpBankBranchDistrictId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseImportTaxPayment_District");

            entity.HasOne(d => d.PitpBank).WithMany(p => p.PurchaseImportTaxPayments)
                .HasForeignKey(d => d.PitpBankId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseImportTaxPayment_Bank");

            entity.HasOne(d => d.PitpVatCommissionarate).WithMany(p => p.PurchaseImportTaxPayments)
                .HasForeignKey(d => d.PitpVatCommissionarateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseImportTaxPayment_CustomsAndVATCommissionarate");

            entity.HasOne(d => d.Purchase).WithMany(p => p.PurchaseImportTaxPayments)
                .HasForeignKey(d => d.PurchaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseImportTaxPayment_Purchase");

            entity.HasOne(d => d.PurchaseImportTaxPaymentType).WithMany(p => p.PurchaseImportTaxPayments)
                .HasForeignKey(d => d.PurchaseImportTaxPaymentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseImportTaxPayment_PurchaseImportTaxPaymentType");
        });

        modelBuilder.Entity<PurchaseImportTaxPaymentType>(entity =>
        {
            entity.ToTable("PurchaseImportTaxPaymentType");

            entity.Property(e => e.PurchaseImportTaxPaymentTypeId).ValueGeneratedNever();
            entity.Property(e => e.PaymentTypeName)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.PaymentTypeShortName)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PurchasePayment>(entity =>
        {
            entity.ToTable("PurchasePayment");

            entity.Property(e => e.BankAccountNo).HasMaxLength(50);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.DocumentNoOrTransId).HasMaxLength(50);
            entity.Property(e => e.DocumentOrTransDate).HasColumnType("datetime");
            entity.Property(e => e.PaidAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentRemarks).HasMaxLength(500);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.WalletNo).HasMaxLength(20);

            entity.HasOne(d => d.Bank).WithMany(p => p.PurchasePayments)
                .HasForeignKey(d => d.BankId)
                .HasConstraintName("FK_PurchasePayment_Bank");

            entity.HasOne(d => d.PaymentMethod).WithMany(p => p.PurchasePayments)
                .HasForeignKey(d => d.PaymentMethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchasePayment_PaymentMethod");

            entity.HasOne(d => d.Purchase).WithMany(p => p.PurchasePayments)
                .HasForeignKey(d => d.PurchaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchasePayment_Purchase");
        });

        modelBuilder.Entity<PurchaseReason>(entity =>
        {
            entity.ToTable("PurchaseReason");

            entity.Property(e => e.PurchaseReasonId).ValueGeneratedNever();
            entity.Property(e => e.Reason)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<PurchaseType>(entity =>
        {
            entity.HasKey(e => e.PurchaseTypeId).HasName("PK_PurchaseType");

            entity.Property(e => e.PurchaseTypeId).ValueGeneratedNever();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Right>(entity =>
        {
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(128);
            entity.Property(e => e.RightCategoryId).HasDefaultValue(1);
            entity.Property(e => e.RightName)
                .IsRequired()
                .HasMaxLength(64);

            entity.HasOne(d => d.RightCategory).WithMany(p => p.Rights)
                .HasForeignKey(d => d.RightCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Rights_RightCategory");
        });

        modelBuilder.Entity<RightCategory>(entity =>
        {
            entity.HasKey(e => e.RightCategoryId).HasName("PK_RightCategorys");

            entity.ToTable("RightCategory");

            entity.Property(e => e.RightCategoryId).ValueGeneratedNever();
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.RightCategoryName)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.Remarks).HasMaxLength(500);
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(64);

            entity.HasOne(d => d.Organization).WithMany(p => p.Roles)
                .HasForeignKey(d => d.OrganizationId)
                .HasConstraintName("FK_Roles_Organizations");
        });

        modelBuilder.Entity<RoleRight>(entity =>
        {
            entity.HasKey(e => e.RoleRightId).HasName("PK_RoleFeatures");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");

            entity.HasOne(d => d.Right).WithMany(p => p.RoleRights)
                .HasForeignKey(d => d.RightId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RoleRights_Rights");

            entity.HasOne(d => d.Role).WithMany(p => p.RoleRights)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo_RoleFeatures_dbo_Roles_RoleId");
        });

        modelBuilder.Entity<Sale>(entity =>
        {
            entity.HasKey(e => e.SalesId);

            entity.Property(e => e.ApproveMessage).HasMaxLength(500);
            entity.Property(e => e.BillOfEntry).HasMaxLength(50);
            entity.Property(e => e.BillOfEntryDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.CustomerAddress).HasMaxLength(500);
            entity.Property(e => e.CustomerBin).HasMaxLength(50);
            entity.Property(e => e.CustomerName).HasMaxLength(200);
            entity.Property(e => e.CustomerNid).HasMaxLength(50);
            entity.Property(e => e.CustomerPhoneNo).HasMaxLength(20);
            entity.Property(e => e.CustomerPoNumber).HasMaxLength(50);
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DiscountOnTotalPrice).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.EmhCode).HasMaxLength(100);
            entity.Property(e => e.ExpectedDeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.IsVdscertificateReceived).HasColumnName("IsVDSCertificateReceived");
            entity.Property(e => e.LcDate).HasColumnType("datetime");
            entity.Property(e => e.LcNo).HasMaxLength(50);
            entity.Property(e => e.PaymentDueAmount)
                .HasComputedColumnSql("(CONVERT([decimal](21,2),((((([TotalPriceWithoutVat]+[TotalVAT])+[TotalSupplimentaryDuty])-[VDSAmount])-[DiscountOnTotalPrice])-[TotalDiscountOnIndividualProduct])-[PaymentReceiveAmount]))", false)
                .HasColumnType("decimal(21, 2)");
            entity.Property(e => e.PaymentReceiveAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ReceivableAmount)
                .HasComputedColumnSql("(CONVERT([decimal](21,2),(((([TotalPriceWithoutVat]+[TotalVAT])+[TotalSupplimentaryDuty])-[VDSAmount])-[DiscountOnTotalPrice])-[TotalDiscountOnIndividualProduct]))", false)
                .HasColumnType("decimal(21, 2)");
            entity.Property(e => e.ReceiverContactNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReceiverName).HasMaxLength(200);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.RejectMessage).HasMaxLength(500);
            entity.Property(e => e.SalesDate).HasColumnType("datetime");
            entity.Property(e => e.SalesDeliveryTypeId).HasDefaultValue(1);
            entity.Property(e => e.SalesRemarks).HasMaxLength(500);
            entity.Property(e => e.ShippingAddress).HasMaxLength(200);
            entity.Property(e => e.TaxInvoiceGeneratedTime).HasColumnType("datetime");
            entity.Property(e => e.TaxInvoicePrintedTime).HasColumnType("datetime");
            entity.Property(e => e.TdsAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TdsCertificateIssueTime).HasColumnType("datetime");
            entity.Property(e => e.TdsCertificateNo).HasMaxLength(50);
            entity.Property(e => e.TdsDate).HasColumnType("datetime");
            entity.Property(e => e.TdsNote).HasMaxLength(500);
            entity.Property(e => e.TdsPaymentBankBranchName).HasMaxLength(100);
            entity.Property(e => e.TdsPaymentBookTransferNo).HasMaxLength(50);
            entity.Property(e => e.TdsPaymentChallanNo).HasMaxLength(20);
            entity.Property(e => e.TdsPaymentDate).HasColumnType("datetime");
            entity.Property(e => e.TdsPaymentEconomicCode).HasMaxLength(20);
            entity.Property(e => e.TermsOfLc).HasMaxLength(500);
            entity.Property(e => e.TotalDiscountOnIndividualProduct).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TotalPriceWithoutVat).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TotalSupplimentaryDuty).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TotalVat)
                .HasColumnType("decimal(26, 8)")
                .HasColumnName("TotalVAT");
            entity.Property(e => e.TransferChallanNo).HasMaxLength(50);
            entity.Property(e => e.TransferChallanPrintedTime).HasColumnType("datetime");
            entity.Property(e => e.VatChallanNo).HasMaxLength(50);
            entity.Property(e => e.VatResponsiblePersonDesignation).HasMaxLength(50);
            entity.Property(e => e.VatResponsiblePersonEmailAddress).HasMaxLength(100);
            entity.Property(e => e.VatResponsiblePersonMobileNo).HasMaxLength(100);
            entity.Property(e => e.VatResponsiblePersonName).HasMaxLength(200);
            entity.Property(e => e.VatResponsiblePersonSignUrl).HasMaxLength(500);
            entity.Property(e => e.Vdsamount)
                .HasColumnType("decimal(26, 8)")
                .HasColumnName("VDSAmount");
            entity.Property(e => e.VdscertificateIssueTime)
                .HasColumnType("datetime")
                .HasColumnName("VDSCertificateIssueTime");
            entity.Property(e => e.VdscertificateNo)
                .HasMaxLength(50)
                .HasColumnName("VDSCertificateNo");
            entity.Property(e => e.Vdsdate)
                .HasColumnType("datetime")
                .HasColumnName("VDSDate");
            entity.Property(e => e.Vdsnote)
                .HasMaxLength(500)
                .HasColumnName("VDSNote");
            entity.Property(e => e.VdspaymentBankBranchName)
                .HasMaxLength(100)
                .HasColumnName("VDSPaymentBankBranchName");
            entity.Property(e => e.VdspaymentBankId).HasColumnName("VDSPaymentBankId");
            entity.Property(e => e.VdspaymentBookTransferNo)
                .HasMaxLength(50)
                .HasColumnName("VDSPaymentBookTransferNo");
            entity.Property(e => e.VdspaymentChallanNo)
                .HasMaxLength(20)
                .HasColumnName("VDSPaymentChallanNo");
            entity.Property(e => e.VdspaymentDate)
                .HasColumnType("datetime")
                .HasColumnName("VDSPaymentDate");
            entity.Property(e => e.VdspaymentEconomicCode)
                .HasMaxLength(20)
                .HasColumnName("VDSPaymentEconomicCode");
            entity.Property(e => e.VehicleDriverContactNo).HasMaxLength(50);
            entity.Property(e => e.VehicleDriverName).HasMaxLength(100);
            entity.Property(e => e.VehicleName).HasMaxLength(100);
            entity.Property(e => e.VehicleRegNo).HasMaxLength(50);
            entity.Property(e => e.WorkOrderNo).HasMaxLength(50);

            entity.HasOne(d => d.Customer).WithMany(p => p.Sales)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_Sales_Customer");

            entity.HasOne(d => d.DeliveryMethod).WithMany(p => p.Sales)
                .HasForeignKey(d => d.DeliveryMethodId)
                .HasConstraintName("FK_Sales_DeliveryMethod");

            entity.HasOne(d => d.ExportType).WithMany(p => p.Sales)
                .HasForeignKey(d => d.ExportTypeId)
                .HasConstraintName("FK_Sales_ExportType");

            entity.HasOne(d => d.OrgBranch).WithMany(p => p.Sales)
                .HasForeignKey(d => d.OrgBranchId)
                .HasConstraintName("FK_Sales_OrgBranch");

            entity.HasOne(d => d.Organization).WithMany(p => p.SaleOrganizations)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sales_Organizations");

            entity.HasOne(d => d.OtherBranchOrganization).WithMany(p => p.SaleOtherBranchOrganizations)
                .HasForeignKey(d => d.OtherBranchOrganizationId)
                .HasConstraintName("FK_Sales_OtherBranchOrganization");

            entity.HasOne(d => d.SalesDeliveryType).WithMany(p => p.Sales)
                .HasForeignKey(d => d.SalesDeliveryTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sales_SalesDeliveryType");

            entity.HasOne(d => d.SalesType).WithMany(p => p.Sales)
                .HasForeignKey(d => d.SalesTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sales_SalesType");

            entity.HasOne(d => d.VdspaymentBank).WithMany(p => p.Sales)
                .HasForeignKey(d => d.VdspaymentBankId)
                .HasConstraintName("FK_Sales_Bank");

            entity.HasOne(d => d.VehicleType).WithMany(p => p.Sales)
                .HasForeignKey(d => d.VehicleTypeId)
                .HasConstraintName("FK_Sales_VehicleType");
        });

        modelBuilder.Entity<SalesDeliveryType>(entity =>
        {
            entity.ToTable("SalesDeliveryType");

            entity.Property(e => e.SalesDeliveryTypeId).ValueGeneratedNever();
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<SalesDetail>(entity =>
        {
            entity.Property(e => e.ConversionRatio).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.DiscountPerItem).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.GoodsId).HasMaxLength(50);
            entity.Property(e => e.Hscode)
                .HasMaxLength(50)
                .HasColumnName("HSCode");
            entity.Property(e => e.PartNo).HasMaxLength(100);
            entity.Property(e => e.ProductCode).HasMaxLength(50);
            entity.Property(e => e.ProductDescription).HasMaxLength(500);
            entity.Property(e => e.ProductVattypeId).HasColumnName("ProductVATTypeId");
            entity.Property(e => e.Quantity).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.ServiceChargePercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Skuid)
                .HasMaxLength(50)
                .HasColumnName("SKUId");
            entity.Property(e => e.Skuno)
                .HasMaxLength(50)
                .HasColumnName("SKUNo");
            entity.Property(e => e.SupplementaryDutyPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TdsPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.Vatpercent)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VATPercent");

            entity.HasOne(d => d.MeasurementUnit).WithMany(p => p.SalesDetails)
                .HasForeignKey(d => d.MeasurementUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesDetails_MeasurementUnits");

            entity.HasOne(d => d.Product).WithMany(p => p.SalesDetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesDetails_Products");

            entity.HasOne(d => d.ProductTransactionBook).WithMany(p => p.SalesDetails)
                .HasForeignKey(d => d.ProductTransactionBookId)
                .HasConstraintName("FK_SalesDetails_ProductTransactionBook");

            entity.HasOne(d => d.ProductVattype).WithMany(p => p.SalesDetails)
                .HasForeignKey(d => d.ProductVattypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesDetails_ProductVATTypes");

            entity.HasOne(d => d.Sales).WithMany(p => p.SalesDetails)
                .HasForeignKey(d => d.SalesId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesDetails_Sales");
        });

        modelBuilder.Entity<SalesDetailBreakdown>(entity =>
        {
            entity.ToTable("SalesDetailBreakdown");

            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.Price).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.RefId).HasMaxLength(100);

            entity.HasOne(d => d.Sales).WithMany(p => p.SalesDetailBreakdowns)
                .HasForeignKey(d => d.SalesId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesDetailBreakdown_Sales");
        });

        modelBuilder.Entity<SalesPaymentReceive>(entity =>
        {
            entity.ToTable("SalesPaymentReceive");

            entity.Property(e => e.BankAccountNo).HasMaxLength(50);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.DocumentNoOrTransId).HasMaxLength(50);
            entity.Property(e => e.DocumentOrTransDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentRemarks).HasMaxLength(500);
            entity.Property(e => e.ReceiveAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ReceiveDate).HasColumnType("datetime");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.WalletNo).HasMaxLength(20);

            entity.HasOne(d => d.Bank).WithMany(p => p.SalesPaymentReceives)
                .HasForeignKey(d => d.BankId)
                .HasConstraintName("FK_SalesPaymentReceive_Bank");

            entity.HasOne(d => d.ReceivedPaymentMethod).WithMany(p => p.SalesPaymentReceives)
                .HasForeignKey(d => d.ReceivedPaymentMethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesPaymentReceive_PaymentMethod");

            entity.HasOne(d => d.Sales).WithMany(p => p.SalesPaymentReceives)
                .HasForeignKey(d => d.SalesId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesPaymentReceive_Sales");
        });

        modelBuilder.Entity<SalesPriceAdjustment>(entity =>
        {
            entity.ToTable("SalesPriceAdjustment");

            entity.Property(e => e.AdjustmentRemarks).HasMaxLength(1000);
            entity.Property(e => e.ClientNoteNo).HasMaxLength(50);
            entity.Property(e => e.ClientNoteTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.NoteNo).HasMaxLength(50);
            entity.Property(e => e.NotePrintedTime).HasColumnType("datetime");
            entity.Property(e => e.ReasonOfChange).HasMaxLength(500);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.VehicleDriverContactNo).HasMaxLength(50);
            entity.Property(e => e.VehicleDriverName).HasMaxLength(100);
            entity.Property(e => e.VehicleName).HasMaxLength(100);
            entity.Property(e => e.VehicleRegNo).HasMaxLength(50);

            entity.HasOne(d => d.AdjustmentType).WithMany(p => p.SalesPriceAdjustments)
                .HasForeignKey(d => d.AdjustmentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesPriceAdjustment_AdjustmentType");

            entity.HasOne(d => d.OrgBranch).WithMany(p => p.SalesPriceAdjustments)
                .HasForeignKey(d => d.OrgBranchId)
                .HasConstraintName("FK_SalesPriceAdjustment_OrgBranch");

            entity.HasOne(d => d.Organization).WithMany(p => p.SalesPriceAdjustments)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesPriceAdjustment_Organizations");

            entity.HasOne(d => d.Sales).WithMany(p => p.SalesPriceAdjustments)
                .HasForeignKey(d => d.SalesId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesPriceAdjustment_Sales");
        });

        modelBuilder.Entity<SalesPriceAdjustmentDetail>(entity =>
        {
            entity.ToTable("SalesPriceAdjustmentDetail");

            entity.Property(e => e.ChangeAmountPerItem).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.QuantityToChange).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ReasonOfChange)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);

            entity.HasOne(d => d.MeasurementUnit).WithMany(p => p.SalesPriceAdjustmentDetails)
                .HasForeignKey(d => d.MeasurementUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesPriceAdjustmentDetail_MeasurementUnits");

            entity.HasOne(d => d.Product).WithMany(p => p.SalesPriceAdjustmentDetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesPriceAdjustmentDetail_Products");

            entity.HasOne(d => d.SalesDetail).WithMany(p => p.SalesPriceAdjustmentDetails)
                .HasForeignKey(d => d.SalesDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesPriceAdjustmentDetail_SalesDetails");

            entity.HasOne(d => d.SalesPriceAdjustment).WithMany(p => p.SalesPriceAdjustmentDetails)
                .HasForeignKey(d => d.SalesPriceAdjustmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesPriceAdjustmentDetail_SalesPriceAdjustment");
        });

        modelBuilder.Entity<SalesType>(entity =>
        {
            entity.ToTable("SalesType");

            entity.Property(e => e.SalesTypeId).ValueGeneratedNever();
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.SalesTypeName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<SubscriptionBill>(entity =>
        {
            entity.ToTable("SubscriptionBill");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Remarks).HasMaxLength(2000);

            entity.HasOne(d => d.CollectionOffice).WithMany(p => p.SubscriptionBillCollectionOffices)
                .HasForeignKey(d => d.CollectionOfficeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubscriptionBill_OrgBranch_BillCollection");

            entity.HasOne(d => d.Customer).WithMany(p => p.SubscriptionBills)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubscriptionBill_Customer");

            entity.HasOne(d => d.CustomerSubscription).WithMany(p => p.SubscriptionBills)
                .HasForeignKey(d => d.CustomerSubscriptionId)
                .HasConstraintName("FK_SubscriptionBill_CustomerSubscription");

            entity.HasOne(d => d.OrgBranch).WithMany(p => p.SubscriptionBillOrgBranches)
                .HasForeignKey(d => d.OrgBranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubscriptionBill_OrgBranch");

            entity.HasOne(d => d.Organization).WithMany(p => p.SubscriptionBills)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubscriptionBill_Organizations");

            entity.HasOne(d => d.Sales).WithMany(p => p.SubscriptionBills)
                .HasForeignKey(d => d.SalesId)
                .HasConstraintName("FK_SubscriptionBill_Sales");
        });

        modelBuilder.Entity<SubscriptionBillDetail>(entity =>
        {
            entity.ToTable("SubscriptionBillDetail");

            entity.Property(e => e.ConversionRatio).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(2000);
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.ProductVatPercent).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Quantity).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.SupplementaryDutyPercent).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(26, 8)");

            entity.HasOne(d => d.CustomerSubscriptionDetail).WithMany(p => p.SubscriptionBillDetails)
                .HasForeignKey(d => d.CustomerSubscriptionDetailId)
                .HasConstraintName("FK_SubscriptionBillDetail_CustomerSubscriptionDetail");

            entity.HasOne(d => d.MeasurementUnit).WithMany(p => p.SubscriptionBillDetails)
                .HasForeignKey(d => d.MeasurementUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubscriptionBillDetail_MeasurementUnits");

            entity.HasOne(d => d.Product).WithMany(p => p.SubscriptionBillDetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubscriptionBillDetail_Products");

            entity.HasOne(d => d.ProductVatType).WithMany(p => p.SubscriptionBillDetails)
                .HasForeignKey(d => d.ProductVatTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubscriptionBillDetail_ProductVATTypes");

            entity.HasOne(d => d.SubscriptionBill).WithMany(p => p.SubscriptionBillDetails)
                .HasForeignKey(d => d.SubscriptionBillId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubscriptionBillDetail_SubscriptionBill");
        });

        modelBuilder.Entity<SupplimentaryDuty>(entity =>
        {
            entity.ToTable("SupplimentaryDuty");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.EffectiveFrom).HasColumnType("datetime");
            entity.Property(e => e.EffectiveTo).HasColumnType("datetime");
            entity.Property(e => e.SdPercent).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Organization).WithMany(p => p.SupplimentaryDuties)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SupplimentaryDuty_Organizations");

            entity.HasOne(d => d.Product).WithMany(p => p.SupplimentaryDuties)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SupplimentaryDuty_Products");
        });

        modelBuilder.Entity<TdsPayment>(entity =>
        {
            entity.ToTable("TdsPayment");

            entity.Property(e => e.BankBranchName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.CustomsAndVatcommissionarateId).HasColumnName("CustomsAndVATCommissionarateId");
            entity.Property(e => e.EconomicCode10thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode11thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode12thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode13thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode1stDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode2ndDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode3rdDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode4thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode5thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode6thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode7thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode8thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode9thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.PaidAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.SubimissionDate).HasColumnType("datetime");
            entity.Property(e => e.SubmissionEntryDate).HasColumnType("datetime");
            entity.Property(e => e.TreasuryChallanNo).HasMaxLength(50);

            entity.HasOne(d => d.BankBranchCountry).WithMany(p => p.TdsPayments)
                .HasForeignKey(d => d.BankBranchCountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TdsPayment_Country");

            entity.HasOne(d => d.BankBranchDistrictOrCity).WithMany(p => p.TdsPayments)
                .HasForeignKey(d => d.BankBranchDistrictOrCityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TdsPayment_DistrictOrCity");

            entity.HasOne(d => d.Bank).WithMany(p => p.TdsPayments)
                .HasForeignKey(d => d.BankId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TdsPayment_Bank");

            entity.HasOne(d => d.CustomsAndVatcommissionarate).WithMany(p => p.TdsPayments)
                .HasForeignKey(d => d.CustomsAndVatcommissionarateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TdsPayment_CustomsAndVATCommissionarate");

            entity.HasOne(d => d.Organization).WithMany(p => p.TdsPayments)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TdsPayment_Organizations");
        });

        modelBuilder.Entity<TdsPaymentForPurchase>(entity =>
        {
            entity.ToTable("TdsPaymentForPurchase");

            entity.Property(e => e.TdsPaidAmount).HasColumnType("decimal(26, 8)");

            entity.HasOne(d => d.Purchase).WithMany(p => p.TdsPaymentForPurchases)
                .HasForeignKey(d => d.PurchaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TdsPaymentForPurchase_Purchase");

            entity.HasOne(d => d.TdsPayment).WithMany(p => p.TdsPaymentForPurchases)
                .HasForeignKey(d => d.TdsPaymentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TdsPaymentForPurchase_TdsPayment");
        });

        modelBuilder.Entity<TransectionType>(entity =>
        {
            entity.Property(e => e.TransectionTypeId).ValueGeneratedNever();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.NameInBangla)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK_UserProfiles");

            entity.HasIndex(e => e.UserName, "UK_Users_UserName").IsUnique();

            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.Designation).HasMaxLength(50);
            entity.Property(e => e.EmailAddress).HasMaxLength(100);
            entity.Property(e => e.EmployeeId).HasMaxLength(50);
            entity.Property(e => e.EmployeePin).HasMaxLength(50);
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.FullName).HasMaxLength(200);
            entity.Property(e => e.InActivationReason).HasMaxLength(200);
            entity.Property(e => e.InActivationTime).HasColumnType("datetime");
            entity.Property(e => e.LastLockReason).HasMaxLength(500);
            entity.Property(e => e.LastLockTime).HasColumnType("datetime");
            entity.Property(e => e.LastLoginTime).HasColumnType("datetime");
            entity.Property(e => e.LastUnlockTime).HasColumnType("datetime");
            entity.Property(e => e.Mobile).HasMaxLength(50);
            entity.Property(e => e.NidNo).HasMaxLength(50);
            entity.Property(e => e.Password).HasMaxLength(200);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.ReferenceTicketNo).HasMaxLength(100);
            entity.Property(e => e.Remarks).HasMaxLength(500);
            entity.Property(e => e.TinNo).HasMaxLength(50);
            entity.Property(e => e.UserImageUrl).HasMaxLength(500);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(64);
            entity.Property(e => e.UserSignUrl).HasMaxLength(500);

            entity.HasOne(d => d.Organization).WithMany(p => p.Users)
                .HasForeignKey(d => d.OrganizationId)
                .HasConstraintName("FK_Users_Organizations");

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo_UserProfiles_dbo_Roles_RoleId");

            entity.HasOne(d => d.UserType).WithMany(p => p.Users)
                .HasForeignKey(d => d.UserTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Users_UserTypes");
        });

        modelBuilder.Entity<UserBranch>(entity =>
        {
            entity.ToTable("UserBranch");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

            entity.HasOne(d => d.OrgBranch).WithMany(p => p.UserBranches)
                .HasForeignKey(d => d.OrgBranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserBranch_OrgBranch");

            entity.HasOne(d => d.Organization).WithMany(p => p.UserBranches)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserBranch_Organizations");

            entity.HasOne(d => d.User).WithMany(p => p.UserBranches)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserBranch_Users");
        });

        modelBuilder.Entity<UserLoginHistory>(entity =>
        {
            entity.ToTable("UserLoginHistory");

            entity.Property(e => e.LoginTime).HasColumnType("datetime");
            entity.Property(e => e.ReasonOfFail).HasMaxLength(200);
            entity.Property(e => e.UserClientDetailInformation).HasMaxLength(2000);
            entity.Property(e => e.UserCookie).HasMaxLength(2000);

            entity.HasOne(d => d.Organization).WithMany(p => p.UserLoginHistories)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserLoginHistory_Organizations");

            entity.HasOne(d => d.User).WithMany(p => p.UserLoginHistories)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserLoginHistory_Users");
        });

        modelBuilder.Entity<UserType>(entity =>
        {
            entity.Property(e => e.UserTypeId).ValueGeneratedNever();
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.UserTypeName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<VehicleType>(entity =>
        {
            entity.ToTable("VehicleType");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.VehicleTypeName)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Organization).WithMany(p => p.VehicleTypes)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VehicleType_Organizations");
        });

        modelBuilder.Entity<Vendor>(entity =>
        {
            entity.ToTable("Vendor");

            entity.Property(e => e.AccountCode).HasMaxLength(100);
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.BankAccountNo).HasMaxLength(50);
            entity.Property(e => e.BankBranchAddress).HasMaxLength(200);
            entity.Property(e => e.BankBranchDistrictOrCityName).HasMaxLength(200);
            entity.Property(e => e.BankBranchName).HasMaxLength(100);
            entity.Property(e => e.BankRoutingCode).HasMaxLength(50);
            entity.Property(e => e.BinNo).HasMaxLength(50);
            entity.Property(e => e.BusinessCategoryDescription).HasMaxLength(500);
            entity.Property(e => e.ContactNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ContactPerson).HasMaxLength(100);
            entity.Property(e => e.ContactPersonDesignation).HasMaxLength(100);
            entity.Property(e => e.ContactPersonEmailAddress).HasMaxLength(100);
            entity.Property(e => e.ContactPersonMobile).HasMaxLength(20);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.CreditLimit).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.CustomsAndVatcommissionarateId).HasColumnName("CustomsAndVATCommissionarateId");
            entity.Property(e => e.DistrictOrCityName).HasMaxLength(200);
            entity.Property(e => e.DivisionOrStateName).HasMaxLength(200);
            entity.Property(e => e.EmailAddress).HasMaxLength(100);
            entity.Property(e => e.IsTds).HasColumnName("IsTDS");
            entity.Property(e => e.IsVds).HasColumnName("IsVDS");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.NationalIdNo).HasMaxLength(50);
            entity.Property(e => e.PostCode).HasMaxLength(20);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.RegistrationNumberUnderActNinetyFour).HasMaxLength(50);
            entity.Property(e => e.ServiceVatCode).HasMaxLength(50);
            entity.Property(e => e.Tdsrate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TDSRate");
            entity.Property(e => e.Tinno)
                .HasMaxLength(50)
                .HasColumnName("TINNo");
            entity.Property(e => e.Vdsrate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("VDSRate");
            entity.Property(e => e.VendorCode).HasMaxLength(100);

            entity.HasOne(d => d.BankBranchCountry).WithMany(p => p.VendorBankBranchCountries)
                .HasForeignKey(d => d.BankBranchCountryId)
                .HasConstraintName("FK_Vendor_Country_BankBranch");

            entity.HasOne(d => d.Bank).WithMany(p => p.Vendors)
                .HasForeignKey(d => d.BankId)
                .HasConstraintName("FK_Vendor_Bank");

            entity.HasOne(d => d.BusinessCategory).WithMany(p => p.Vendors)
                .HasForeignKey(d => d.BusinessCategoryId)
                .HasConstraintName("FK_Vendor_BusinessCategory");

            entity.HasOne(d => d.BusinessNature).WithMany(p => p.Vendors)
                .HasForeignKey(d => d.BusinessNatureId)
                .HasConstraintName("FK_Vendor_BusinessNature");

            entity.HasOne(d => d.Country).WithMany(p => p.VendorCountries)
                .HasForeignKey(d => d.CountryId)
                .HasConstraintName("FK_Vendor_Country");

            entity.HasOne(d => d.CustomsAndVatcommissionarate).WithMany(p => p.Vendors)
                .HasForeignKey(d => d.CustomsAndVatcommissionarateId)
                .HasConstraintName("FK_Vendor_CustomsAndVATCommissionarate");

            entity.HasOne(d => d.Organization).WithMany(p => p.Vendors)
                .HasForeignKey(d => d.OrganizationId)
                .HasConstraintName("FK_Vendor_Organizations");

            entity.HasOne(d => d.VendorCategory).WithMany(p => p.Vendors)
                .HasForeignKey(d => d.VendorCategoryId)
                .HasConstraintName("FK_Vendor_VendorCategory");

            entity.HasOne(d => d.VendorType).WithMany(p => p.Vendors)
                .HasForeignKey(d => d.VendorTypeId)
                .HasConstraintName("FK_Vendor_VendorType");
        });

        modelBuilder.Entity<VendorBranch>(entity =>
        {
            entity.ToTable("VendorBranch");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

            entity.HasOne(d => d.OrgBranch).WithMany(p => p.VendorBranches)
                .HasForeignKey(d => d.OrgBranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VendorBranch_OrgBranch");

            entity.HasOne(d => d.Organization).WithMany(p => p.VendorBranches)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VendorBranch_Organizations");

            entity.HasOne(d => d.Vendor).WithMany(p => p.VendorBranches)
                .HasForeignKey(d => d.VendorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VendorBranch_Vendor");
        });

        modelBuilder.Entity<VendorCategory>(entity =>
        {
            entity.ToTable("VendorCategory");

            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Remarks).HasMaxLength(1000);

            entity.HasOne(d => d.Organization).WithMany(p => p.VendorCategories)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VendorCategory_Organizations");
        });

        modelBuilder.Entity<VendorType>(entity =>
        {
            entity.ToTable("VendorType");

            entity.Property(e => e.VendorTypeId).ValueGeneratedNever();
            entity.Property(e => e.VendorTypeName)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ViewContractualProduction>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewContractualProduction");

            entity.Property(e => e.AccountCode).HasMaxLength(100);
            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.BankAccountNo).HasMaxLength(50);
            entity.Property(e => e.BankBranchAddress).HasMaxLength(200);
            entity.Property(e => e.BankBranchDistrictOrCityName).HasMaxLength(200);
            entity.Property(e => e.BankBranchName).HasMaxLength(100);
            entity.Property(e => e.BankRoutingCode).HasMaxLength(50);
            entity.Property(e => e.BinNo).HasMaxLength(50);
            entity.Property(e => e.BusinessCategoryDescription).HasMaxLength(500);
            entity.Property(e => e.ChallanNo).HasMaxLength(50);
            entity.Property(e => e.ClosingDate).HasColumnType("datetime");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ContactPerson).HasMaxLength(100);
            entity.Property(e => e.ContactPersonDesignation).HasMaxLength(100);
            entity.Property(e => e.ContactPersonEmailAddress).HasMaxLength(100);
            entity.Property(e => e.ContactPersonMobile).HasMaxLength(20);
            entity.Property(e => e.ContractDate).HasColumnType("datetime");
            entity.Property(e => e.ContractNo)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ContractTypeName).HasMaxLength(50);
            entity.Property(e => e.CreditLimit).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.CustomsAndVatcommissionarateId).HasColumnName("CustomsAndVATCommissionarateId");
            entity.Property(e => e.DistrictOrCityName).HasMaxLength(200);
            entity.Property(e => e.DivisionOrStateName).HasMaxLength(200);
            entity.Property(e => e.EmailAddress).HasMaxLength(100);
            entity.Property(e => e.IsTds).HasColumnName("IsTDS");
            entity.Property(e => e.IsVds).HasColumnName("IsVDS");
            entity.Property(e => e.IssueDate).HasColumnType("datetime");
            entity.Property(e => e.NationalIdNo).HasMaxLength(50);
            entity.Property(e => e.OrganizationAddress)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.OrganizationBin).HasMaxLength(50);
            entity.Property(e => e.OrganizationName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.PostCode).HasMaxLength(20);
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Quantity).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.RegistrationNumberUnderActNinetyFour).HasMaxLength(50);
            entity.Property(e => e.ServiceVatCode).HasMaxLength(50);
            entity.Property(e => e.Tdsrate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TDSRate");
            entity.Property(e => e.Tinno)
                .HasMaxLength(50)
                .HasColumnName("TINNo");
            entity.Property(e => e.UnitName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Vdsrate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("VDSRate");
            entity.Property(e => e.VendorCode).HasMaxLength(100);
            entity.Property(e => e.VendorName).HasMaxLength(200);
        });

        modelBuilder.Entity<ViewCreditNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewCreditNote");

            entity.Property(e => e.CreditNoteChallanNo).HasMaxLength(50);
            entity.Property(e => e.CreditNoteChallanPrintTime).HasColumnType("datetime");
            entity.Property(e => e.CreditNoteCreatedTime).HasColumnType("datetime");
            entity.Property(e => e.CreditNoteReturnDate).HasColumnType("datetime");
            entity.Property(e => e.CustomerBinNo).HasMaxLength(50);
            entity.Property(e => e.CustomerName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.IsVdscertificateReceived).HasColumnName("IsVDSCertificateReceived");
            entity.Property(e => e.OrganizationAddress)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.OrganizationBin).HasMaxLength(50);
            entity.Property(e => e.OrganizationName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.ReasonOfReturn).HasMaxLength(500);
            entity.Property(e => e.SalesDate).HasColumnType("datetime");
            entity.Property(e => e.SalesInvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.SalesInvoiceNo).HasMaxLength(50);
            entity.Property(e => e.SalesPaymentDueAmount).HasColumnType("decimal(21, 2)");
            entity.Property(e => e.SalesPaymentReceiveAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.SalesReceivableAmount).HasColumnType("decimal(21, 2)");
            entity.Property(e => e.SalesTotalPriceWithoutVat).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.SalesTotalVat).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.SalesTypeName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.SalesVatChallanNo).HasMaxLength(50);
            entity.Property(e => e.SalesVdsAmount).HasColumnType("decimal(26, 8)");
        });

        modelBuilder.Entity<ViewCreditNoteDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewCreditNoteDetail");

            entity.Property(e => e.BrandName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.Color).HasMaxLength(100);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.CreditNoteChallanNo).HasMaxLength(50);
            entity.Property(e => e.CreditNoteChallanPrintTime).HasColumnType("datetime");
            entity.Property(e => e.CreditNoteCreatedTime).HasColumnType("datetime");
            entity.Property(e => e.CreditNoteMeasurementUnitName).HasMaxLength(50);
            entity.Property(e => e.CustomerBin).HasMaxLength(50);
            entity.Property(e => e.CustomerName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.GoodsId).HasMaxLength(50);
            entity.Property(e => e.HsCode).HasMaxLength(50);
            entity.Property(e => e.MeasurementUnitName).HasMaxLength(50);
            entity.Property(e => e.ModelNo).HasMaxLength(50);
            entity.Property(e => e.OrganizationAddress)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.OrganizationBin).HasMaxLength(50);
            entity.Property(e => e.OrganizationName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.PartNo).HasMaxLength(100);
            entity.Property(e => e.ProductCategory).HasMaxLength(100);
            entity.Property(e => e.ProductCode).HasMaxLength(50);
            entity.Property(e => e.ProductDescription).HasMaxLength(500);
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ProductType).HasMaxLength(200);
            entity.Property(e => e.Quantity).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ReasonOfReturn).HasMaxLength(500);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.ReturnDate).HasColumnType("datetime");
            entity.Property(e => e.ReturnQuantity).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.SalesCreatedTime).HasColumnType("datetime");
            entity.Property(e => e.SalesDate).HasColumnType("datetime");
            entity.Property(e => e.SalesTypeName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ShippingAddress).HasMaxLength(200);
            entity.Property(e => e.Size).HasMaxLength(100);
            entity.Property(e => e.SkuId).HasMaxLength(50);
            entity.Property(e => e.SkuNo).HasMaxLength(50);
            entity.Property(e => e.SupplementaryDuty).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.SupplementaryDutyPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.VatAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.VatChallanNo).HasMaxLength(50);
            entity.Property(e => e.VatPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VatTypeName)
                .IsRequired()
                .HasMaxLength(500);
        });

        modelBuilder.Entity<ViewCustomer>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewCustomer");

            entity.Property(e => e.AccountCode).HasMaxLength(100);
            entity.Property(e => e.BankAccountNo).HasMaxLength(50);
            entity.Property(e => e.BankBranchAddress).HasMaxLength(200);
            entity.Property(e => e.BankBranchCountryName).HasMaxLength(200);
            entity.Property(e => e.BankBranchDistrictOrCityName).HasMaxLength(200);
            entity.Property(e => e.BankBranchName).HasMaxLength(100);
            entity.Property(e => e.BankRoutingCode).HasMaxLength(50);
            entity.Property(e => e.BinNo).HasMaxLength(50);
            entity.Property(e => e.BusinessCategoryDescription).HasMaxLength(500);
            entity.Property(e => e.BusinessCategoryName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BusinessNatureName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ContactPerson).HasMaxLength(100);
            entity.Property(e => e.ContactPersonDesignation).HasMaxLength(100);
            entity.Property(e => e.ContactPersonEmailAddress).HasMaxLength(100);
            entity.Property(e => e.ContactPersonMobile).HasMaxLength(20);
            entity.Property(e => e.ConuntryName).HasMaxLength(200);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.CreditLimit).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.CustomerAddress).HasMaxLength(500);
            entity.Property(e => e.CustomerName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.CustomsAndVatCommissionarateName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.DeliveryAddress).HasMaxLength(500);
            entity.Property(e => e.DeliveryContactPerson).HasMaxLength(100);
            entity.Property(e => e.DeliveryContactPersonDesignation).HasMaxLength(100);
            entity.Property(e => e.DeliveryContactPersonEmailAddress).HasMaxLength(100);
            entity.Property(e => e.DeliveryContactPersonMobile).HasMaxLength(20);
            entity.Property(e => e.DeliveryContryName).HasMaxLength(200);
            entity.Property(e => e.DeliveryDistrictOrCityName).HasMaxLength(200);
            entity.Property(e => e.DeliveryDivisionOrStateName).HasMaxLength(200);
            entity.Property(e => e.DistrictOrCityName).HasMaxLength(200);
            entity.Property(e => e.DivisionOrStateName).HasMaxLength(200);
            entity.Property(e => e.EmailAddress).HasMaxLength(100);
            entity.Property(e => e.IsActiveStatus)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.IsForeignCustomerStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsFullExportOrientedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsRequireBranchStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsTdsStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsVdsStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.NidNo).HasMaxLength(50);
            entity.Property(e => e.OrganizationAddress)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.OrganizationBin).HasMaxLength(50);
            entity.Property(e => e.OrganizationName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.PhoneNo).HasMaxLength(20);
            entity.Property(e => e.PostCode).HasMaxLength(20);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.RegistrationNumberUnderActNinetyFour).HasMaxLength(50);
            entity.Property(e => e.ServiceVatCode).HasMaxLength(50);
            entity.Property(e => e.TdsRate).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TinNo).HasMaxLength(50);
            entity.Property(e => e.VdsRate).HasColumnType("decimal(5, 2)");
        });

        modelBuilder.Entity<ViewCustomerBranch>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewCustomerBranch");

            entity.Property(e => e.BranchAddress)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.BranchName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.CustomerBin).HasMaxLength(50);
            entity.Property(e => e.CustomerName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.CustomerNid).HasMaxLength(50);
            entity.Property(e => e.IsActiveStatus)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ViewCustomerForeign>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewCustomerForeign");

            entity.Property(e => e.AccountCode).HasMaxLength(100);
            entity.Property(e => e.BankAccountNo).HasMaxLength(50);
            entity.Property(e => e.BankBranchAddress).HasMaxLength(200);
            entity.Property(e => e.BankBranchCountryName).HasMaxLength(200);
            entity.Property(e => e.BankBranchDistrictOrCityName).HasMaxLength(200);
            entity.Property(e => e.BankBranchName).HasMaxLength(100);
            entity.Property(e => e.BankRoutingCode).HasMaxLength(50);
            entity.Property(e => e.ContactPerson).HasMaxLength(100);
            entity.Property(e => e.ContactPersonDesignation).HasMaxLength(100);
            entity.Property(e => e.ContactPersonEmailAddress).HasMaxLength(100);
            entity.Property(e => e.ContactPersonMobile).HasMaxLength(20);
            entity.Property(e => e.ConuntryName).HasMaxLength(200);
            entity.Property(e => e.CustomerAddress).HasMaxLength(500);
            entity.Property(e => e.CustomerName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.DeliveryAddress).HasMaxLength(500);
            entity.Property(e => e.DeliveryContactPerson).HasMaxLength(100);
            entity.Property(e => e.DeliveryContactPersonDesignation).HasMaxLength(100);
            entity.Property(e => e.DeliveryContactPersonEmailAddress).HasMaxLength(100);
            entity.Property(e => e.DeliveryContactPersonMobile).HasMaxLength(20);
            entity.Property(e => e.DeliveryContryName).HasMaxLength(200);
            entity.Property(e => e.DeliveryDistrictOrCityName).HasMaxLength(200);
            entity.Property(e => e.DeliveryDivisionOrStateName).HasMaxLength(200);
            entity.Property(e => e.DistrictOrCityName).HasMaxLength(200);
            entity.Property(e => e.DivisionOrStateName).HasMaxLength(200);
            entity.Property(e => e.EmailAddress).HasMaxLength(100);
            entity.Property(e => e.IsActiveStatus)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo).HasMaxLength(20);
            entity.Property(e => e.PostCode).HasMaxLength(20);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.TinNo).HasMaxLength(50);
        });

        modelBuilder.Entity<ViewCustomerLocal>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewCustomerLocal");

            entity.Property(e => e.AccountCode).HasMaxLength(100);
            entity.Property(e => e.BankAccountNo).HasMaxLength(50);
            entity.Property(e => e.BankBranchAddress).HasMaxLength(200);
            entity.Property(e => e.BankBranchDistrictOrCityName).HasMaxLength(200);
            entity.Property(e => e.BankBranchName).HasMaxLength(100);
            entity.Property(e => e.BankRoutingCode).HasMaxLength(50);
            entity.Property(e => e.BinNo).HasMaxLength(50);
            entity.Property(e => e.BusinessCategoryDescription).HasMaxLength(500);
            entity.Property(e => e.BusinessCategoryName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BusinessNatureName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ContactPerson).HasMaxLength(100);
            entity.Property(e => e.ContactPersonDesignation).HasMaxLength(100);
            entity.Property(e => e.ContactPersonEmailAddress).HasMaxLength(100);
            entity.Property(e => e.ContactPersonMobile).HasMaxLength(20);
            entity.Property(e => e.CreditLimit).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.CustomerAddress).HasMaxLength(500);
            entity.Property(e => e.CustomerName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.CustomsAndVatCommissionarateName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.DeliveryAddress).HasMaxLength(500);
            entity.Property(e => e.DeliveryContactPerson).HasMaxLength(100);
            entity.Property(e => e.DeliveryContactPersonDesignation).HasMaxLength(100);
            entity.Property(e => e.DeliveryContactPersonEmailAddress).HasMaxLength(100);
            entity.Property(e => e.DeliveryContactPersonMobile).HasMaxLength(20);
            entity.Property(e => e.DeliveryDistrictOrCityName).HasMaxLength(200);
            entity.Property(e => e.DeliveryDivisionOrStateName).HasMaxLength(200);
            entity.Property(e => e.DistrictOrCityName).HasMaxLength(200);
            entity.Property(e => e.DivisionOrStateName).HasMaxLength(200);
            entity.Property(e => e.EmailAddress).HasMaxLength(100);
            entity.Property(e => e.IsActiveStatus)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.IsFullExportOrientedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsRequireBranchStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsTdsStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsVdsStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.NidNo).HasMaxLength(50);
            entity.Property(e => e.PhoneNo).HasMaxLength(20);
            entity.Property(e => e.PostCode).HasMaxLength(20);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.RegistrationNumberUnderActNinetyFour).HasMaxLength(50);
            entity.Property(e => e.ServiceVatCode).HasMaxLength(50);
            entity.Property(e => e.TdsRate).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TinNo).HasMaxLength(50);
            entity.Property(e => e.VdsRate).HasColumnType("decimal(5, 2)");
        });

        modelBuilder.Entity<ViewCustomerSubscription>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewCustomerSubscription");

            entity.Property(e => e.ActivationStatus)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.BillingOfficeAddress)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.BillingOfficeName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.CollectionOfficeAddress)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.CollectionOfficeName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.CustomerAddress).HasMaxLength(500);
            entity.Property(e => e.CustomerBin).HasMaxLength(50);
            entity.Property(e => e.CustomerName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.CustomerNidNo).HasMaxLength(50);
            entity.Property(e => e.Remarks).HasMaxLength(2000);
            entity.Property(e => e.SubscriptionPriceWithoutTax).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.SupplementaryDuty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.VatAmount).HasColumnType("decimal(38, 8)");
        });

        modelBuilder.Entity<ViewCustomerWithBranch>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewCustomerWithBranch");

            entity.Property(e => e.BranchAddress)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.BranchName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.ContactPerson)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ContactPersonDesignation).HasMaxLength(100);
            entity.Property(e => e.ContactPersonMobile)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.CustomerAddress).HasMaxLength(500);
            entity.Property(e => e.CustomerBin).HasMaxLength(50);
            entity.Property(e => e.CustomerContactNo)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.CustomerEmailAddress).HasMaxLength(100);
            entity.Property(e => e.CustomerName).HasMaxLength(253);
            entity.Property(e => e.CustomerNid).HasMaxLength(50);
            entity.Property(e => e.DeliveryAddress).HasMaxLength(500);
        });

        modelBuilder.Entity<ViewDebitNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewDebitNote");

            entity.Property(e => e.DebitNoteChallanNo).HasMaxLength(50);
            entity.Property(e => e.DebitNoteChallanPrintTime).HasColumnType("datetime");
            entity.Property(e => e.DebitNoteCreatedTime).HasColumnType("datetime");
            entity.Property(e => e.DebitNoteReturnDate).HasColumnType("datetime");
            entity.Property(e => e.OrganizationAddress)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.OrganizationBin).HasMaxLength(50);
            entity.Property(e => e.OrganizationName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");
            entity.Property(e => e.PurchaseDueAmount).HasColumnType("decimal(28, 8)");
            entity.Property(e => e.PurchaseInvoiceNo).HasMaxLength(50);
            entity.Property(e => e.PurchasePaidAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.PurchasePayableAmount).HasColumnType("decimal(21, 2)");
            entity.Property(e => e.PurchaseTotalPriceWithoutVat).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.PurchaseTotalVat).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.PurchaseTypeName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PurchaseVatChallanIssueDate).HasColumnType("datetime");
            entity.Property(e => e.PurchaseVatChallanNo).HasMaxLength(50);
            entity.Property(e => e.PurchaseVdsAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.PurchaseVoucherNo).HasMaxLength(50);
            entity.Property(e => e.ReasonOfReturn).HasMaxLength(500);
            entity.Property(e => e.VendorBinNo).HasMaxLength(50);
            entity.Property(e => e.VendorName)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<ViewDebitNoteDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewDebitNoteDetails");

            entity.Property(e => e.AdvanceIncomeTaxAmount).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.AdvanceTaxAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.BrandName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.Color).HasMaxLength(100);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.CustomDutyAmount).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.DebitNoteChallanNo).HasMaxLength(50);
            entity.Property(e => e.DebitNoteChallanPrintTime).HasColumnType("datetime");
            entity.Property(e => e.DebitNoteCreatedTime).HasColumnType("datetime");
            entity.Property(e => e.DebitNoteMeasurementUnitName).HasMaxLength(50);
            entity.Property(e => e.DebitNoteReturnDate).HasColumnType("datetime");
            entity.Property(e => e.GoodsId).HasMaxLength(50);
            entity.Property(e => e.Hscode).HasMaxLength(50);
            entity.Property(e => e.ImportDutyAmount).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.MeasurementUnitName).HasMaxLength(50);
            entity.Property(e => e.ModelNo).HasMaxLength(50);
            entity.Property(e => e.OrganizationAddress)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.OrganizationBin).HasMaxLength(50);
            entity.Property(e => e.OrganizationName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.PartNo).HasMaxLength(100);
            entity.Property(e => e.ProductCategory).HasMaxLength(100);
            entity.Property(e => e.ProductCode).HasMaxLength(50);
            entity.Property(e => e.ProductDescription).HasMaxLength(500);
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ProductType).HasMaxLength(200);
            entity.Property(e => e.PurchaseCreatedTime).HasColumnType("datetime");
            entity.Property(e => e.PurchaseTypeName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Quantity).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ReasonOfReturn).HasMaxLength(500);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.RegulatoryDutyAmount).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.ReturnQuantity).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.Size).HasMaxLength(100);
            entity.Property(e => e.SkuId).HasMaxLength(50);
            entity.Property(e => e.SkuNo).HasMaxLength(50);
            entity.Property(e => e.SupplementaryDutyAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TotalPriceWithoutTax).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.VatAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.VatChallanIssueDate).HasColumnType("datetime");
            entity.Property(e => e.VatChallanNo).HasMaxLength(50);
            entity.Property(e => e.VatOrAtImposablePrice).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.VatPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VatTypeName)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.VendorBinNo).HasMaxLength(50);
            entity.Property(e => e.VendorName)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<ViewInputOutputCoEfficient>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewInputOutputCoEfficient");

            entity.Property(e => e.ActivationStatus)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.BaseTp)
                .HasColumnType("decimal(26, 8)")
                .HasColumnName("BaseTP");
            entity.Property(e => e.BrandName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.Color).HasMaxLength(100);
            entity.Property(e => e.DeviceModel).HasMaxLength(50);
            entity.Property(e => e.EffectiveFrom).HasColumnType("datetime");
            entity.Property(e => e.EffectiveTo).HasColumnType("datetime");
            entity.Property(e => e.Hscode).HasMaxLength(50);
            entity.Property(e => e.MaterialCost).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.MeasurementUnitName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ModelNo).HasMaxLength(50);
            entity.Property(e => e.Mrp)
                .HasColumnType("decimal(26, 8)")
                .HasColumnName("MRP");
            entity.Property(e => e.MushakSubmissionDate).HasColumnType("datetime");
            entity.Property(e => e.OrganizationAddress)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.OrganizationBin).HasMaxLength(50);
            entity.Property(e => e.OrganizationName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.OverheadCost).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.PartCode).HasMaxLength(100);
            entity.Property(e => e.PartNo).HasMaxLength(100);
            entity.Property(e => e.ProductCategoryName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ProductNumber).HasMaxLength(50);
            entity.Property(e => e.ProductTypeName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ProfitAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.PurchaseUnitPrice).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.SalesUnitPrice).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.Size).HasMaxLength(100);
            entity.Property(e => e.Specification).HasMaxLength(100);
            entity.Property(e => e.TotalQuantity).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.Variant).HasMaxLength(100);
            entity.Property(e => e.Weight).HasMaxLength(100);
        });

        modelBuilder.Entity<ViewMushakReturnSelfPayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewMushakReturnSelfPayment");

            entity.Property(e => e.BankBranchName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.BankName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomsAndVatcommissionarateId).HasColumnName("CustomsAndVATCommissionarateId");
            entity.Property(e => e.DistrictOrCityName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.EconomicCode)
                .IsRequired()
                .HasMaxLength(26);
            entity.Property(e => e.EconomicCode10thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode11thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode12thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode13thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode1stDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode2ndDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode3rdDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode4thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode5thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode6thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode7thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode8thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode9thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.IsSubmittedStatus)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false);
            entity.Property(e => e.MushakMonthName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaidAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentTypeName)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SubimissionDate).HasColumnType("datetime");
            entity.Property(e => e.TreasuryChallanNo).HasMaxLength(50);
        });

        modelBuilder.Entity<ViewMushakReturnVdsPayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewMushakReturnVdsPayment");

            entity.Property(e => e.BankBranchName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.BankName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomsAndVatcommissionarateId).HasColumnName("CustomsAndVATCommissionarateId");
            entity.Property(e => e.DistrictOrCityName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.EconomicCode)
                .IsRequired()
                .HasMaxLength(26);
            entity.Property(e => e.EconomicCode10thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode11thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode12thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode13thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode1stDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode2ndDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode3rdDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode4thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode5thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode6thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode7thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode8thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode9thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.IsSubmittedStatus)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false);
            entity.Property(e => e.MushakMonthName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaidAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentTypeName)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SubimissionDate).HasColumnType("datetime");
            entity.Property(e => e.TreasuryChallanNo).HasMaxLength(50);
        });

        modelBuilder.Entity<ViewOrganizationConfigurationBoolean>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewOrganizationConfigurationBoolean");

            entity.Property(e => e.OrganizationConfigurationBooleanTypeName)
                .IsRequired()
                .HasMaxLength(250);
        });

        modelBuilder.Entity<ViewProduct>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewProduct");

            entity.Property(e => e.BrandName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.Color).HasMaxLength(100);
            entity.Property(e => e.DefaultVatPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.DeviceModel).HasMaxLength(50);
            entity.Property(e => e.HsCodeOrServiceCode).HasMaxLength(50);
            entity.Property(e => e.MeasurementUnitName).HasMaxLength(50);
            entity.Property(e => e.ModelNo).HasMaxLength(50);
            entity.Property(e => e.PartCode).HasMaxLength(100);
            entity.Property(e => e.PartNo).HasMaxLength(100);
            entity.Property(e => e.ProductCategoryName).HasMaxLength(100);
            entity.Property(e => e.ProductGroupName).HasMaxLength(200);
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ProductNumber).HasMaxLength(50);
            entity.Property(e => e.ProductTypeName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ProductVatTypeName).HasMaxLength(500);
            entity.Property(e => e.ProductVatid).HasColumnName("ProductVATId");
            entity.Property(e => e.ProductVattypeId).HasColumnName("ProductVATTypeId");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.Size).HasMaxLength(100);
            entity.Property(e => e.Specification).HasMaxLength(100);
            entity.Property(e => e.Variant).HasMaxLength(100);
            entity.Property(e => e.Weight).HasMaxLength(100);
        });

        modelBuilder.Entity<ViewProductMeasurementUnit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewProductMeasurementUnit");

            entity.Property(e => e.ConvertionRatio).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.MeasurementUnitName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<ViewProductVat>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewProductVat");

            entity.Property(e => e.DefaultVatPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ProductVatTypeName)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.ProductVatid).HasColumnName("ProductVATId");
            entity.Property(e => e.ProductVattypeId).HasColumnName("ProductVATTypeId");
        });

        modelBuilder.Entity<ViewProductionReceive>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewProductionReceive");

            entity.Property(e => e.BatchNo).HasMaxLength(50);
            entity.Property(e => e.BranchAddress)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.BranchName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.BrandName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Color).HasMaxLength(100);
            entity.Property(e => e.Hscode)
                .HasMaxLength(50)
                .HasColumnName("HSCode");
            entity.Property(e => e.MaterialCost).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.MeasurementUnitName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ModelNo).HasMaxLength(50);
            entity.Property(e => e.OrganizationAddress)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.OrganizationBin).HasMaxLength(50);
            entity.Property(e => e.OrganizationName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.ProductCategoryName).HasMaxLength(100);
            entity.Property(e => e.ProductCode).HasMaxLength(50);
            entity.Property(e => e.ProductGroupName).HasMaxLength(200);
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ProductTypeName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ProductWeight).HasMaxLength(100);
            entity.Property(e => e.ProductionType)
                .IsRequired()
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.ReceiveQuantity).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ReceiveTime).HasColumnType("datetime");
            entity.Property(e => e.Size).HasMaxLength(100);
            entity.Property(e => e.Specification).HasMaxLength(100);
            entity.Property(e => e.Variant).HasMaxLength(100);
        });

        modelBuilder.Entity<ViewPurchase>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewPurchase");

            entity.Property(e => e.AdvanceIncomeTaxAmount).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.AdvanceTaxAmount).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.ApproveStatus)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.BillOfEntryDate).HasColumnType("datetime");
            entity.Property(e => e.BillOfEntryNo).HasMaxLength(50);
            entity.Property(e => e.BranchName).HasMaxLength(250);
            entity.Property(e => e.CustomDutyAmount).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.ImportDutyAmount).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.IsApprovedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsCompleteStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsRejectedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsTdsStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsVdsStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.OrganizationName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");
            entity.Property(e => e.PurchaseTypeName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RegulatoryDutyAmount).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.SupplementaryDutyAmount).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.TdsAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TotalPriceWithoutTax).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.VatAmount).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.VatChallanIssueDate).HasColumnType("datetime");
            entity.Property(e => e.VatChallanNo).HasMaxLength(50);
            entity.Property(e => e.VatOrAtImposablePrice).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.Vdsamount)
                .HasColumnType("decimal(26, 8)")
                .HasColumnName("VDSAmount");
            entity.Property(e => e.VendorInvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.VendorInvoiceNo).HasMaxLength(50);
            entity.Property(e => e.VendorName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.VoucherDate).HasColumnType("datetime");
            entity.Property(e => e.VoucherNo).HasMaxLength(50);
        });

        modelBuilder.Entity<ViewPurchaseDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewPurchaseDetails");

            entity.Property(e => e.AdvanceIncomeTaxAmount).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.AdvanceTaxAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.BrandName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.Color).HasMaxLength(100);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.CustomDutyAmount).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.GoodsId).HasMaxLength(50);
            entity.Property(e => e.Hscode).HasMaxLength(50);
            entity.Property(e => e.ImportDutyAmount).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.MeasurementUnitName).HasMaxLength(50);
            entity.Property(e => e.ModelNo).HasMaxLength(50);
            entity.Property(e => e.OrganizationAddress)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.OrganizationBin).HasMaxLength(50);
            entity.Property(e => e.OrganizationName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.PartNo).HasMaxLength(100);
            entity.Property(e => e.ProductCategory).HasMaxLength(100);
            entity.Property(e => e.ProductCode).HasMaxLength(50);
            entity.Property(e => e.ProductDescription).HasMaxLength(500);
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ProductType).HasMaxLength(200);
            entity.Property(e => e.PurchaseCreatedTime).HasColumnType("datetime");
            entity.Property(e => e.PurchaseTypeName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Quantity).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.RegulatoryDutyAmount).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.Size).HasMaxLength(100);
            entity.Property(e => e.SkuId).HasMaxLength(50);
            entity.Property(e => e.SkuNo).HasMaxLength(50);
            entity.Property(e => e.SupplementaryDutyAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TotalPriceWithoutTax).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.VatAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.VatChallanIssueDate).HasColumnType("datetime");
            entity.Property(e => e.VatChallanNo).HasMaxLength(50);
            entity.Property(e => e.VatOrAtImposablePrice).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.VatPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VatTypeName)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.VendorBinNo).HasMaxLength(50);
            entity.Property(e => e.VendorName)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<ViewPurchaseImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewPurchaseImport");

            entity.Property(e => e.AdvanceIncomeTaxAmount).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.AdvanceTaxAmount).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.ApproveStatus)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.BillOfEntryDate).HasColumnType("datetime");
            entity.Property(e => e.BillOfEntryNo).HasMaxLength(50);
            entity.Property(e => e.BranchName).HasMaxLength(250);
            entity.Property(e => e.CommercialInvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.CommercialInvoiceNo).HasMaxLength(50);
            entity.Property(e => e.CustomDutyAmount).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.ImportDutyAmount).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.IsApprovedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsCompleteStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsRejectedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.OrganizationName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");
            entity.Property(e => e.RegulatoryDutyAmount).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.SupplementaryDutyAmount).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.TotalPriceWithoutTax).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.VatAmount).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.VatOrAtImposablePrice).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.VendorName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.VoucherDate).HasColumnType("datetime");
            entity.Property(e => e.VoucherNo).HasMaxLength(50);
        });

        modelBuilder.Entity<ViewPurchaseLocal>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewPurchaseLocal");

            entity.Property(e => e.ApproveStatus)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.BranchName).HasMaxLength(250);
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.IsApprovedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsCompleteStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsRejectedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsTdsStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsVdsStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsVdscertificatePrinted)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("IsVDSCertificatePrinted");
            entity.Property(e => e.OrganizationAddress)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.OrganizationBin).HasMaxLength(50);
            entity.Property(e => e.OrganizationName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");
            entity.Property(e => e.SupplementaryDutyAmount).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.TdsAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TotalPriceWithoutTax).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.VatAmount).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.VatChallanIssueDate).HasColumnType("datetime");
            entity.Property(e => e.VatChallanNo).HasMaxLength(50);
            entity.Property(e => e.VatOrAtImposablePrice).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.Vdsamount)
                .HasColumnType("decimal(26, 8)")
                .HasColumnName("VDSAmount");
            entity.Property(e => e.VendorInvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.VendorInvoiceNo).HasMaxLength(50);
            entity.Property(e => e.VendorName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.VoucherDate).HasColumnType("datetime");
            entity.Property(e => e.VoucherNo).HasMaxLength(50);
        });

        modelBuilder.Entity<ViewPurchaseVd>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewPurchaseVds");

            entity.Property(e => e.ApproveStatus)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.BranchName).HasMaxLength(250);
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.IsApprovedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsCompleteStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsRejectedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsTdsStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsVdsStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsVdscertificatePrinted)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("IsVDSCertificatePrinted");
            entity.Property(e => e.OrganizationAddress)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.OrganizationBin).HasMaxLength(50);
            entity.Property(e => e.OrganizationName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");
            entity.Property(e => e.SupplementaryDutyAmount).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.TdsAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TotalPriceWithoutTax).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.VatAmount).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.VatChallanIssueDate).HasColumnType("datetime");
            entity.Property(e => e.VatChallanNo).HasMaxLength(50);
            entity.Property(e => e.VatOrAtImposablePrice).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.Vdsamount)
                .HasColumnType("decimal(26, 8)")
                .HasColumnName("VDSAmount");
            entity.Property(e => e.VendorInvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.VendorInvoiceNo).HasMaxLength(50);
            entity.Property(e => e.VendorName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.VoucherDate).HasColumnType("datetime");
            entity.Property(e => e.VoucherNo).HasMaxLength(50);
        });

        modelBuilder.Entity<ViewReferenceCustomer>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewReferenceCustomer");

            entity.Property(e => e.ReferenceKey)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<ViewReferenceProduct>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewReferenceProduct");

            entity.Property(e => e.ReferenceKey)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<ViewReferenceUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewReferenceUser");

            entity.Property(e => e.ReferenceKey)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<ViewReferenceVendor>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewReferenceVendor");

            entity.Property(e => e.ReferenceKey)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<ViewSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewSales");

            entity.Property(e => e.ApproveStatus)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.BranchName).HasMaxLength(250);
            entity.Property(e => e.CustomerName).HasMaxLength(200);
            entity.Property(e => e.EmhCode).HasMaxLength(100);
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.IsApprovedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsCompleteStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsRejectedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsTdsStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsVatChallanPrintedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsVdsStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.OrganizationName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.SalesDate).HasColumnType("datetime");
            entity.Property(e => e.SalesTypeName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ShippingAddress).HasMaxLength(200);
            entity.Property(e => e.TdsAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TotalPriceWithoutTax).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.TotalReceivableAmount).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.TotalSupplementaryDuty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.TotalVat).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.VatChallanNo).HasMaxLength(50);
            entity.Property(e => e.VatChallanPrintedTime).HasColumnType("datetime");
            entity.Property(e => e.Vdsamount)
                .HasColumnType("decimal(26, 8)")
                .HasColumnName("VDSAmount");
        });

        modelBuilder.Entity<ViewSalesDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewSalesDetail");

            entity.Property(e => e.BrandName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.Color).HasMaxLength(100);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.CustomerBin).HasMaxLength(50);
            entity.Property(e => e.CustomerName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.GoodsId).HasMaxLength(50);
            entity.Property(e => e.HsCode).HasMaxLength(50);
            entity.Property(e => e.MeasurementUnitName).HasMaxLength(50);
            entity.Property(e => e.ModelNo).HasMaxLength(50);
            entity.Property(e => e.OrganizationAddress)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.OrganizationBin).HasMaxLength(50);
            entity.Property(e => e.OrganizationName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.PartNo).HasMaxLength(100);
            entity.Property(e => e.ProductCategory).HasMaxLength(100);
            entity.Property(e => e.ProductCode).HasMaxLength(50);
            entity.Property(e => e.ProductDescription).HasMaxLength(500);
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ProductType).HasMaxLength(200);
            entity.Property(e => e.Quantity).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.SalesCreatedTime).HasColumnType("datetime");
            entity.Property(e => e.SalesDate).HasColumnType("datetime");
            entity.Property(e => e.SalesTypeName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ShippingAddress).HasMaxLength(200);
            entity.Property(e => e.Size).HasMaxLength(100);
            entity.Property(e => e.SkuId).HasMaxLength(50);
            entity.Property(e => e.SkuNo).HasMaxLength(50);
            entity.Property(e => e.SupplementaryDuty).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.SupplementaryDutyPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.VatAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.VatChallanNo).HasMaxLength(50);
            entity.Property(e => e.VatPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VatTypeName)
                .IsRequired()
                .HasMaxLength(500);
        });

        modelBuilder.Entity<ViewSalesExport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewSalesExport");

            entity.Property(e => e.ApproveStatus)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.BranchName).HasMaxLength(250);
            entity.Property(e => e.CustomerName).HasMaxLength(200);
            entity.Property(e => e.EmhCode).HasMaxLength(100);
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.IsApprovedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsCompleteStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsRejectedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsVatChallanPrintedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.OrganizationName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.SalesDate).HasColumnType("datetime");
            entity.Property(e => e.TotalPriceWithoutTax).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.TotalReceivableAmount).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.TotalSupplementaryDuty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.TotalVat).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.VatChallanNo).HasMaxLength(50);
            entity.Property(e => e.VatChallanPrintedTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ViewSalesLocal>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewSalesLocal");

            entity.Property(e => e.ApproveStatus)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.BranchName).HasMaxLength(250);
            entity.Property(e => e.CustomerName).HasMaxLength(200);
            entity.Property(e => e.EmhCode).HasMaxLength(100);
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.IsApprovedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsCompleteStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsRejectedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsTdsStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsVatChallanPrintedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsVdsStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.OrganizationName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.SalesDate).HasColumnType("datetime");
            entity.Property(e => e.TdsAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TotalPriceWithoutTax).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.TotalReceivableAmount).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.TotalSupplementaryDuty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.TotalVat).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.VatChallanNo).HasMaxLength(50);
            entity.Property(e => e.VatChallanPrintedTime).HasColumnType("datetime");
            entity.Property(e => e.Vdsamount)
                .HasColumnType("decimal(26, 8)")
                .HasColumnName("VDSAmount");
        });

        modelBuilder.Entity<ViewSalesPaymentAgingReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewSalesPaymentAgingReport");

            entity.Property(e => e.CustomerAddress).HasMaxLength(500);
            entity.Property(e => e.CustomerBinNo).HasMaxLength(50);
            entity.Property(e => e.CustomerContactNo).HasMaxLength(20);
            entity.Property(e => e.CustomerEmailAddress).HasMaxLength(100);
            entity.Property(e => e.CustomerName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.MoreThanOneTwentyDays).HasColumnType("decimal(38, 2)");
            entity.Property(e => e.NinetyToOneTwentyDays).HasColumnType("decimal(38, 2)");
            entity.Property(e => e.OrganizationAddress)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.OrganizationBin).HasMaxLength(50);
            entity.Property(e => e.OrganizationName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.SixtyOneToNinetyDays).HasColumnType("decimal(38, 2)");
            entity.Property(e => e.ThirtyOneToSixtyDays).HasColumnType("decimal(38, 2)");
            entity.Property(e => e.ZeroToThirtyDays).HasColumnType("decimal(38, 2)");
        });

        modelBuilder.Entity<ViewSubscriptionBill>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewSubscriptionBill");

            entity.Property(e => e.BillMonthName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BillingOfficeAddress)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.BillingOfficeName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.CollectionOfficeAddress)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.CollectionOfficeName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.CustomerAddress).HasMaxLength(500);
            entity.Property(e => e.CustomerBinOrNidNo).HasMaxLength(50);
            entity.Property(e => e.CustomerName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.IsSentToSalesStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo).HasMaxLength(20);
            entity.Property(e => e.SubscriptionPriceWithoutTax).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.SupplementaryDuty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.TaxInvoiceIssueTime).HasColumnType("datetime");
            entity.Property(e => e.TaxInvoiceNo).HasMaxLength(50);
            entity.Property(e => e.VatAmount).HasColumnType("decimal(38, 8)");
        });

        modelBuilder.Entity<ViewTdsPayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewTdsPayment");

            entity.Property(e => e.BankBranchName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.BankName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomsAndVatcommissionarateId).HasColumnName("CustomsAndVATCommissionarateId");
            entity.Property(e => e.DistrictOrCityName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.EconomicCode)
                .IsRequired()
                .HasMaxLength(26);
            entity.Property(e => e.EconomicCode10thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode11thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode12thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode13thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode1stDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode2ndDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode3rdDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode4thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode5thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode6thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode7thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode8thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.EconomicCode9thDisit)
                .IsRequired()
                .HasMaxLength(2);
            entity.Property(e => e.IsSubmittedStatus)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false);
            entity.Property(e => e.MushakMonthName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaidAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.SubimissionDate).HasColumnType("datetime");
            entity.Property(e => e.TreasuryChallanNo).HasMaxLength(50);
        });

        modelBuilder.Entity<ViewUploadedContent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewUploadedContent");

            entity.Property(e => e.DocumentTypeName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FileUrl)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.IsActiveStatus)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.MimeType).HasMaxLength(50);
            entity.Property(e => e.Node).HasMaxLength(500);
            entity.Property(e => e.Remarks).HasMaxLength(500);
        });

        modelBuilder.Entity<ViewUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewUser");

            entity.Property(e => e.ActiveStatus)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.Designation).HasMaxLength(50);
            entity.Property(e => e.EmailAddress).HasMaxLength(100);
            entity.Property(e => e.EmployeeId).HasMaxLength(50);
            entity.Property(e => e.EmployeePin).HasMaxLength(50);
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.FullName).HasMaxLength(200);
            entity.Property(e => e.InActivationReason).HasMaxLength(200);
            entity.Property(e => e.InActivationTime).HasColumnType("datetime");
            entity.Property(e => e.LastLockReason).HasMaxLength(500);
            entity.Property(e => e.LastLockTime).HasColumnType("datetime");
            entity.Property(e => e.LastLoginTime).HasColumnType("datetime");
            entity.Property(e => e.Mobile).HasMaxLength(50);
            entity.Property(e => e.NidNo).HasMaxLength(50);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(64);
            entity.Property(e => e.TinNo).HasMaxLength(50);
            entity.Property(e => e.UserImageUrl).HasMaxLength(500);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(64);
            entity.Property(e => e.UserSignUrl).HasMaxLength(500);
            entity.Property(e => e.UserTypeName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<ViewVdsPurchase>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewVdsPurchase");

            entity.Property(e => e.ApproveStatus)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.BranchName).HasMaxLength(250);
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.IsApprovedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsCompleteStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsRejectedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsTdsStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsVdsStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsVdscertificatePrinted)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("IsVDSCertificatePrinted");
            entity.Property(e => e.OrganizationAddress)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.OrganizationBin).HasMaxLength(50);
            entity.Property(e => e.OrganizationName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");
            entity.Property(e => e.SupplementaryDutyAmount).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.TdsAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TotalPriceWithoutTax).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.TotalPriceWithoutVat).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TotalVat)
                .HasColumnType("decimal(26, 8)")
                .HasColumnName("TotalVAT");
            entity.Property(e => e.VatAmount).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.VatChallanIssueDate).HasColumnType("datetime");
            entity.Property(e => e.VatChallanNo).HasMaxLength(50);
            entity.Property(e => e.VatOrAtImposablePrice).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.Vdsamount)
                .HasColumnType("decimal(26, 8)")
                .HasColumnName("VDSAmount");
            entity.Property(e => e.VendorInvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.VendorInvoiceNo).HasMaxLength(50);
            entity.Property(e => e.VendorName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.VoucherDate).HasColumnType("datetime");
            entity.Property(e => e.VoucherNo).HasMaxLength(50);
        });

        modelBuilder.Entity<ViewVdsSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewVdsSale");

            entity.Property(e => e.ApproveStatus)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.BranchName).HasMaxLength(250);
            entity.Property(e => e.CustomerName).HasMaxLength(200);
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.IsApprovedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsCompleteStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsRejectedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsTdsStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsVatChallanPrintedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsVdsCertificateReceived)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsVdsStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.OrganizationAddress)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.OrganizationBin).HasMaxLength(50);
            entity.Property(e => e.OrganizationName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.SalesDate).HasColumnType("datetime");
            entity.Property(e => e.SalesTypeName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TdsAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TotalPriceWithoutTax).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.TotalPriceWithoutVat).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TotalReceivableAmount).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.TotalSupplementaryDuty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.TotalVat).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.VatChallanNo).HasMaxLength(50);
            entity.Property(e => e.VatChallanPrintedTime).HasColumnType("datetime");
            entity.Property(e => e.VdsAmount).HasColumnType("decimal(26, 8)");
        });

        modelBuilder.Entity<ViewVdsSale1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewVdsSales");

            entity.Property(e => e.ApproveStatus)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.BranchName).HasMaxLength(250);
            entity.Property(e => e.CustomerName).HasMaxLength(200);
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.IsApprovedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsCompleteStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsRejectedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsTdsStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsVatChallanPrintedStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsVdsStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsVdscertificateReceived).HasColumnName("IsVDSCertificateReceived");
            entity.Property(e => e.OrganizationName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.SalesDate).HasColumnType("datetime");
            entity.Property(e => e.SalesTypeName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TdsAmount).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TotalPriceWithoutTax).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.TotalPriceWithoutVat).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.TotalReceivableAmount).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.TotalSupplementaryDuty).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.TotalVat).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.VatChallanNo).HasMaxLength(50);
            entity.Property(e => e.VatChallanPrintedTime).HasColumnType("datetime");
            entity.Property(e => e.Vdsamount)
                .HasColumnType("decimal(26, 8)")
                .HasColumnName("VDSAmount");
        });

        modelBuilder.Entity<ViewVendor>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewVendor");

            entity.Property(e => e.AccountCode).HasMaxLength(100);
            entity.Property(e => e.BankAccountNo).HasMaxLength(50);
            entity.Property(e => e.BankBranchAddress).HasMaxLength(200);
            entity.Property(e => e.BankBranchCountryName).HasMaxLength(200);
            entity.Property(e => e.BankBranchDistrictOrCityName).HasMaxLength(200);
            entity.Property(e => e.BankBranchName).HasMaxLength(100);
            entity.Property(e => e.BankRoutingCode).HasMaxLength(50);
            entity.Property(e => e.BinNo).HasMaxLength(50);
            entity.Property(e => e.BusinessCategoryDescription).HasMaxLength(500);
            entity.Property(e => e.BusinessCategoryName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BusinessNatureName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ContactPerson).HasMaxLength(100);
            entity.Property(e => e.ContactPersonDesignation).HasMaxLength(100);
            entity.Property(e => e.ContactPersonEmailAddress).HasMaxLength(100);
            entity.Property(e => e.ContactPersonMobile).HasMaxLength(20);
            entity.Property(e => e.ConuntryName).HasMaxLength(200);
            entity.Property(e => e.CreditLimit).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.CustomsAndVatCommissionarateName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.DistrictOrCityName).HasMaxLength(200);
            entity.Property(e => e.DivisionOrStateName).HasMaxLength(200);
            entity.Property(e => e.EmailAddress).HasMaxLength(100);
            entity.Property(e => e.IsActiveStatus)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.IsRequireBranchStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsTdsStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsVdsStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.NidNo).HasMaxLength(50);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PostCode).HasMaxLength(20);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.RegistrationNumberUnderActNinetyFour).HasMaxLength(50);
            entity.Property(e => e.ServiceVatCode).HasMaxLength(50);
            entity.Property(e => e.TdsRate).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TinNo).HasMaxLength(50);
            entity.Property(e => e.VdsRate).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.VendorAddress)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.VendorName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.VendorTypeName)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ViewVendorBranch>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewVendorBranch");

            entity.Property(e => e.BranchAddress)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.BranchName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.IsActiveStatus)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.VendorBin).HasMaxLength(50);
            entity.Property(e => e.VendorName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.VendorNid).HasMaxLength(50);
        });

        modelBuilder.Entity<ViewVendorForeign>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewVendorForeign");

            entity.Property(e => e.AccountCode).HasMaxLength(100);
            entity.Property(e => e.BankAccountNo).HasMaxLength(50);
            entity.Property(e => e.BankBranchAddress).HasMaxLength(200);
            entity.Property(e => e.BankBranchCountryName).HasMaxLength(200);
            entity.Property(e => e.BankBranchDistrictOrCityName).HasMaxLength(200);
            entity.Property(e => e.BankBranchName).HasMaxLength(100);
            entity.Property(e => e.BankRoutingCode).HasMaxLength(50);
            entity.Property(e => e.BusinessCategoryDescription).HasMaxLength(500);
            entity.Property(e => e.BusinessCategoryName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BusinessNatureName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ContactPerson).HasMaxLength(100);
            entity.Property(e => e.ContactPersonDesignation).HasMaxLength(100);
            entity.Property(e => e.ContactPersonEmailAddress).HasMaxLength(100);
            entity.Property(e => e.ContactPersonMobile).HasMaxLength(20);
            entity.Property(e => e.ConuntryName).HasMaxLength(200);
            entity.Property(e => e.DistrictOrCityName).HasMaxLength(200);
            entity.Property(e => e.DivisionOrStateName).HasMaxLength(200);
            entity.Property(e => e.EmailAddress).HasMaxLength(100);
            entity.Property(e => e.IsActiveStatus)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.IsRequireBranchStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PostCode).HasMaxLength(20);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.TinNo).HasMaxLength(50);
            entity.Property(e => e.VendorAddress)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.VendorName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.VendorTypeName)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ViewVendorLocal>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewVendorLocal");

            entity.Property(e => e.AccountCode).HasMaxLength(100);
            entity.Property(e => e.BankAccountNo).HasMaxLength(50);
            entity.Property(e => e.BankBranchAddress).HasMaxLength(200);
            entity.Property(e => e.BankBranchDistrictOrCityName).HasMaxLength(200);
            entity.Property(e => e.BankBranchName).HasMaxLength(100);
            entity.Property(e => e.BankRoutingCode).HasMaxLength(50);
            entity.Property(e => e.BinNo).HasMaxLength(50);
            entity.Property(e => e.BusinessCategoryDescription).HasMaxLength(500);
            entity.Property(e => e.BusinessCategoryName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BusinessNatureName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ContactPerson).HasMaxLength(100);
            entity.Property(e => e.ContactPersonDesignation).HasMaxLength(100);
            entity.Property(e => e.ContactPersonEmailAddress).HasMaxLength(100);
            entity.Property(e => e.ContactPersonMobile).HasMaxLength(20);
            entity.Property(e => e.CreditLimit).HasColumnType("decimal(26, 8)");
            entity.Property(e => e.CustomsAndVatCommissionarateName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.DistrictOrCityName).HasMaxLength(200);
            entity.Property(e => e.DivisionOrStateName).HasMaxLength(200);
            entity.Property(e => e.EmailAddress).HasMaxLength(100);
            entity.Property(e => e.IsActiveStatus)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.IsRequireBranchStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsTdsStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsVdsStatus)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.NidNo).HasMaxLength(50);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PostCode).HasMaxLength(20);
            entity.Property(e => e.ReferenceKey).HasMaxLength(100);
            entity.Property(e => e.RegistrationNumberUnderActNinetyFour).HasMaxLength(50);
            entity.Property(e => e.ServiceVatCode).HasMaxLength(50);
            entity.Property(e => e.TdsRate).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TinNo).HasMaxLength(50);
            entity.Property(e => e.VdsRate).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.VendorAddress)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.VendorName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.VendorTypeName)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}